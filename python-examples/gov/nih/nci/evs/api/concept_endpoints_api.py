# coding: utf-8

"""
    NCI EVS Rest API

    Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>

    The version of the OpenAPI document: 1.7.2.RELEASE
    Contact: NCIAppSupport@nih.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from models.association import Association
from models.association_entry_result_list import AssociationEntryResultList
from models.concept import Concept
from models.concept_map import ConceptMap
from models.disjoint_with import DisjointWith
from models.hierarchy_node import HierarchyNode
from models.role import Role

from api_client import ApiClient, RequestSerialized
from api_response import ApiResponse
from rest import RESTResponseType


class ConceptEndpointsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def get_association_entries(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code_or_label: Annotated[StrictStr, Field(
                description="Code/label in the specified terminology, e.g. 'A5' or 'Has_Salt_Form' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AssociationEntryResultList:
        """Get the association entries for the specified terminology and code. Associations used to define subset membership are not resolved by this call


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code_or_label: Code/label in the specified terminology, e.g. 'A5' or 'Has_Salt_Form' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code_or_label: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_association_entries_serialize(
            terminology=terminology,
            code_or_label=code_or_label,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "AssociationEntryResultList",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_association_entries_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code_or_label: Annotated[StrictStr, Field(
                description="Code/label in the specified terminology, e.g. 'A5' or 'Has_Salt_Form' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AssociationEntryResultList]:
        """Get the association entries for the specified terminology and code. Associations used to define subset membership are not resolved by this call


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code_or_label: Code/label in the specified terminology, e.g. 'A5' or 'Has_Salt_Form' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code_or_label: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_association_entries_serialize(
            terminology=terminology,
            code_or_label=code_or_label,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "AssociationEntryResultList",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_association_entries_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code_or_label: Annotated[StrictStr, Field(
                description="Code/label in the specified terminology, e.g. 'A5' or 'Has_Salt_Form' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the association entries for the specified terminology and code. Associations used to define subset membership are not resolved by this call


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code_or_label: Code/label in the specified terminology, e.g. 'A5' or 'Has_Salt_Form' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code_or_label: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_association_entries_serialize(
            terminology=terminology,
            code_or_label=code_or_label,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "AssociationEntryResultList",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_association_entries_serialize(
            self,
            terminology,
            code_or_label,
            from_record,
            page_size,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code_or_label is not None:
            _path_params['codeOrLabel'] = code_or_label
        # process the query parameters
        if from_record is not None:
            _query_params.append(('fromRecord', from_record))

        if page_size is not None:
            _query_params.append(('pageSize', page_size))

        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/associations/{codeOrLabel}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_associations1(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Association]:
        """Get the associations for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_associations1_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Association]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_associations1_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Association]]:
        """Get the associations for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_associations1_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Association]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_associations1_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the associations for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_associations1_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Association]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_associations1_serialize(
            self,
            terminology,
            code,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/associations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_children(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Concept]:
        """Get child concepts for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_children_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_children_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Concept]]:
        """Get child concepts for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_children_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_children_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get child concepts for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_children_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_children_serialize(
            self,
            terminology,
            code,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/children',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_concept(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            limit: Annotated[Optional[StrictInt], Field(
                description="If set to an integer (between <i>1</i> and <i>100</i>), elements of the concept should be limited to that specified number of entries. Thus a user interface can quickly retrieve initial data for a concept (even with <i>include=full</i>) and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.")] = None,
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Concept:
        """Get the concept for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param limit: If set to an integer (between <i>1</i> and <i>100</i>), elements of the concept should be limited to that specified number of entries. Thus a user interface can quickly retrieve initial data for a concept (even with <i>include=full</i>) and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.
        :type limit: int
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_serialize(
            terminology=terminology,
            code=code,
            limit=limit,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "Concept",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_concept_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            limit: Annotated[Optional[StrictInt], Field(
                description="If set to an integer (between <i>1</i> and <i>100</i>), elements of the concept should be limited to that specified number of entries. Thus a user interface can quickly retrieve initial data for a concept (even with <i>include=full</i>) and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.")] = None,
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Concept]:
        """Get the concept for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param limit: If set to an integer (between <i>1</i> and <i>100</i>), elements of the concept should be limited to that specified number of entries. Thus a user interface can quickly retrieve initial data for a concept (even with <i>include=full</i>) and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.
        :type limit: int
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_serialize(
            terminology=terminology,
            code=code,
            limit=limit,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "Concept",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_concept_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            limit: Annotated[Optional[StrictInt], Field(
                description="If set to an integer (between <i>1</i> and <i>100</i>), elements of the concept should be limited to that specified number of entries. Thus a user interface can quickly retrieve initial data for a concept (even with <i>include=full</i>) and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.")] = None,
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the concept for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param limit: If set to an integer (between <i>1</i> and <i>100</i>), elements of the concept should be limited to that specified number of entries. Thus a user interface can quickly retrieve initial data for a concept (even with <i>include=full</i>) and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.
        :type limit: int
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_serialize(
            terminology=terminology,
            code=code,
            limit=limit,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "Concept",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_concept_serialize(
            self,
            terminology,
            code,
            limit,
            include,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if limit is not None:
            _query_params.append(('limit', limit))

        if include is not None:
            _query_params.append(('include', include))

        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_concepts(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            list: Annotated[StrictStr, Field(
                description="List (comma-separated) of codes to return concepts for, e.g.<ul><li>'C2291,C3224' for <i>ncit</i></li><li>'C0010137,C0025202' for <i>ncim</i></li></ul>")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Concept]:
        """Get concepts specified by list parameter


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param list: List (comma-separated) of codes to return concepts for, e.g.<ul><li>'C2291,C3224' for <i>ncit</i></li><li>'C0010137,C0025202' for <i>ncim</i></li></ul> (required)
        :type list: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concepts_serialize(
            terminology=terminology,
            list=list,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_concepts_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            list: Annotated[StrictStr, Field(
                description="List (comma-separated) of codes to return concepts for, e.g.<ul><li>'C2291,C3224' for <i>ncit</i></li><li>'C0010137,C0025202' for <i>ncim</i></li></ul>")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Concept]]:
        """Get concepts specified by list parameter


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param list: List (comma-separated) of codes to return concepts for, e.g.<ul><li>'C2291,C3224' for <i>ncit</i></li><li>'C0010137,C0025202' for <i>ncim</i></li></ul> (required)
        :type list: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concepts_serialize(
            terminology=terminology,
            list=list,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_concepts_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            list: Annotated[StrictStr, Field(
                description="List (comma-separated) of codes to return concepts for, e.g.<ul><li>'C2291,C3224' for <i>ncit</i></li><li>'C0010137,C0025202' for <i>ncim</i></li></ul>")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get concepts specified by list parameter


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param list: List (comma-separated) of codes to return concepts for, e.g.<ul><li>'C2291,C3224' for <i>ncit</i></li><li>'C0010137,C0025202' for <i>ncim</i></li></ul> (required)
        :type list: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concepts_serialize(
            terminology=terminology,
            list=list,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_concepts_serialize(
            self,
            terminology,
            list,
            include,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        # process the query parameters
        if include is not None:
            _query_params.append(('include', include))

        if list is not None:
            _query_params.append(('list', list))

        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_descendants(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit''")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            max_level: Annotated[Optional[StrictInt], Field(description="Max level of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Concept]:
        """Get descendant concepts for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit'' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param max_level: Max level of results to return
        :type max_level: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_descendants_serialize(
            terminology=terminology,
            code=code,
            from_record=from_record,
            page_size=page_size,
            max_level=max_level,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_descendants_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit''")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            max_level: Annotated[Optional[StrictInt], Field(description="Max level of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Concept]]:
        """Get descendant concepts for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit'' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param max_level: Max level of results to return
        :type max_level: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_descendants_serialize(
            terminology=terminology,
            code=code,
            from_record=from_record,
            page_size=page_size,
            max_level=max_level,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_descendants_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit''")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            max_level: Annotated[Optional[StrictInt], Field(description="Max level of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get descendant concepts for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit'' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param max_level: Max level of results to return
        :type max_level: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_descendants_serialize(
            terminology=terminology,
            code=code,
            from_record=from_record,
            page_size=page_size,
            max_level=max_level,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_descendants_serialize(
            self,
            terminology,
            code,
            from_record,
            page_size,
            max_level,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if from_record is not None:
            _query_params.append(('fromRecord', from_record))

        if page_size is not None:
            _query_params.append(('pageSize', page_size))

        if max_level is not None:
            _query_params.append(('maxLevel', max_level))

        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/descendants',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_disjoint_with(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3910' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[DisjointWith]:
        """Get \"disjoint with\" info for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3910' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_disjoint_with_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[DisjointWith]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_disjoint_with_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3910' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[DisjointWith]]:
        """Get \"disjoint with\" info for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3910' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_disjoint_with_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[DisjointWith]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_disjoint_with_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3910' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get \"disjoint with\" info for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3910' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_disjoint_with_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[DisjointWith]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_disjoint_with_serialize(
            self,
            terminology,
            code,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/disjointWith',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_history(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i> and <i>ncim</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Concept:
        """Get history for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i> and <i>ncim</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_history_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "Concept",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_history_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i> and <i>ncim</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Concept]:
        """Get history for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i> and <i>ncim</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_history_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "Concept",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_history_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i> and <i>ncim</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get history for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i> and <i>ncim</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_history_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "Concept",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_history_serialize(
            self,
            terminology,
            code,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_inverse_associations(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Association]:
        """Get inverse associations for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_inverse_associations_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Association]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_inverse_associations_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Association]]:
        """Get inverse associations for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_inverse_associations_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Association]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_inverse_associations_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get inverse associations for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g.<ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_inverse_associations_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Association]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_inverse_associations_serialize(
            self,
            terminology,
            code,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/inverseAssociations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_inverse_roles(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Role]:
        """Get inverse roles for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_inverse_roles_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Role]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_inverse_roles_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Role]]:
        """Get inverse roles for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_inverse_roles_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Role]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_inverse_roles_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get inverse roles for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>.  This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_inverse_roles_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Role]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_inverse_roles_serialize(
            self,
            terminology,
            code,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/inverseRoles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_maps(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ConceptMap]:
        """Get maps for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_maps_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[ConceptMap]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_maps_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ConceptMap]]:
        """Get maps for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_maps_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[ConceptMap]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_maps_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get maps for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_maps_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[ConceptMap]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_maps_serialize(
            self,
            terminology,
            code,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/maps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_parents(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Concept]:
        """Get parent concepts for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_parents_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_parents_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Concept]]:
        """Get parent concepts for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_parents_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_parents_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>)")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul>")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get parent concepts for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' or 'ncim' (<a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/TERMINOLOGIES.md\">See here for complete list</a>) (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. <ul><li>'C3224' for <i>ncit</i></li><li>'C0025202' for <i>ncim</i></li></ul> (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_parents_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_parents_serialize(
            self,
            terminology,
            code,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/parents',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_paths_from_root(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. ")] = None,
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[List[Concept]]:
        """Get paths from the hierarchy root to the specified concept.


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. 
        :type include: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_paths_from_root_serialize(
            terminology=terminology,
            code=code,
            include=include,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[List[Concept]]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_paths_from_root_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. ")] = None,
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[List[Concept]]]:
        """Get paths from the hierarchy root to the specified concept.


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. 
        :type include: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_paths_from_root_serialize(
            terminology=terminology,
            code=code,
            include=include,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[List[Concept]]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_paths_from_root_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. ")] = None,
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get paths from the hierarchy root to the specified concept.


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. 
        :type include: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_paths_from_root_serialize(
            terminology=terminology,
            code=code,
            include=include,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[List[Concept]]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_paths_from_root_serialize(
            self,
            terminology,
            code,
            include,
            from_record,
            page_size,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if include is not None:
            _query_params.append(('include', include))

        if from_record is not None:
            _query_params.append(('fromRecord', from_record))

        if page_size is not None:
            _query_params.append(('pageSize', page_size))

        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/pathsFromRoot',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_paths_to_ancestor(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            ancestor_code: Annotated[StrictStr, Field(
                description="Ancestor code of the other specified code, e.g. 'C2991' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. ")] = None,
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[List[Concept]]:
        """Get paths from the specified code to the specified ancestor code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param ancestor_code: Ancestor code of the other specified code, e.g. 'C2991' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type ancestor_code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. 
        :type include: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_paths_to_ancestor_serialize(
            terminology=terminology,
            code=code,
            ancestor_code=ancestor_code,
            include=include,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[List[Concept]]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_paths_to_ancestor_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            ancestor_code: Annotated[StrictStr, Field(
                description="Ancestor code of the other specified code, e.g. 'C2991' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. ")] = None,
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[List[Concept]]]:
        """Get paths from the specified code to the specified ancestor code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param ancestor_code: Ancestor code of the other specified code, e.g. 'C2991' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type ancestor_code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. 
        :type include: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_paths_to_ancestor_serialize(
            terminology=terminology,
            code=code,
            ancestor_code=ancestor_code,
            include=include,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[List[Concept]]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_paths_to_ancestor_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            ancestor_code: Annotated[StrictStr, Field(
                description="Ancestor code of the other specified code, e.g. 'C2991' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. ")] = None,
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get paths from the specified code to the specified ancestor code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param ancestor_code: Ancestor code of the other specified code, e.g. 'C2991' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type ancestor_code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. 
        :type include: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_paths_to_ancestor_serialize(
            terminology=terminology,
            code=code,
            ancestor_code=ancestor_code,
            include=include,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[List[Concept]]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_paths_to_ancestor_serialize(
            self,
            terminology,
            code,
            ancestor_code,
            include,
            from_record,
            page_size,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        if ancestor_code is not None:
            _path_params['ancestorCode'] = ancestor_code
        # process the query parameters
        if include is not None:
            _query_params.append(('include', include))

        if from_record is not None:
            _query_params.append(('fromRecord', from_record))

        if page_size is not None:
            _query_params.append(('pageSize', page_size))

        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/pathsToAncestor/{ancestorCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_paths_to_root(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. ")] = None,
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[List[Concept]]:
        """Get paths to the hierarchy root from the specified code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. 
        :type include: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_paths_to_root_serialize(
            terminology=terminology,
            code=code,
            include=include,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[List[Concept]]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_paths_to_root_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. ")] = None,
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[List[Concept]]]:
        """Get paths to the hierarchy root from the specified code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. 
        :type include: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_paths_to_root_serialize(
            terminology=terminology,
            code=code,
            include=include,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[List[Concept]]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_paths_to_root_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. ")] = None,
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get paths to the hierarchy root from the specified code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>. For this call, it is recommended to avoid using this parameter unless you need it for a specific use case.  Any value other than 'minimal' may produce very large payload results. 
        :type include: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_paths_to_root_serialize(
            terminology=terminology,
            code=code,
            include=include,
            from_record=from_record,
            page_size=page_size,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[List[Concept]]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_paths_to_root_serialize(
            self,
            terminology,
            code,
            include,
            from_record,
            page_size,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if include is not None:
            _query_params.append(('include', include))

        if from_record is not None:
            _query_params.append(('fromRecord', from_record))

        if page_size is not None:
            _query_params.append(('pageSize', page_size))

        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/pathsToRoot',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_roles1(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Role]:
        """Get roles for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_roles1_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Role]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_roles1_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Role]]:
        """Get roles for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_roles1_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Role]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_roles1_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get roles for the specified terminology and code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_roles1_serialize(
            terminology=terminology,
            code=code,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Role]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_roles1_serialize(
            self,
            terminology,
            code,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/roles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_roots(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit'.  This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Concept]:
        """Get root concepts for the specified terminology


        :param terminology: Terminology, e.g. 'ncit'.  This call is only meaningful for <i>ncit</i>. (required)
        :type terminology: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_roots_serialize(
            terminology=terminology,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_roots_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit'.  This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Concept]]:
        """Get root concepts for the specified terminology


        :param terminology: Terminology, e.g. 'ncit'.  This call is only meaningful for <i>ncit</i>. (required)
        :type terminology: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_roots_serialize(
            terminology=terminology,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_roots_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(
                description="Terminology, e.g. 'ncit'.  This call is only meaningful for <i>ncit</i>.")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get root concepts for the specified terminology


        :param terminology: Terminology, e.g. 'ncit'.  This call is only meaningful for <i>ncit</i>. (required)
        :type terminology: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_roots_serialize(
            terminology=terminology,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_roots_serialize(
            self,
            terminology,
            include,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        # process the query parameters
        if include is not None:
            _query_params.append(('include', include))

        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/roots',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_subset_members1(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code for a subset concept in the specified terminology, e.g. 'C157225' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Concept]:
        """Get subset members for the specified terminology and code.

        This endpoint will be deprecated in v2 in favor of a top level subset member endpoint.

        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code for a subset concept in the specified terminology, e.g. 'C157225' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subset_members1_serialize(
            terminology=terminology,
            code=code,
            from_record=from_record,
            page_size=page_size,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_subset_members1_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code for a subset concept in the specified terminology, e.g. 'C157225' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Concept]]:
        """Get subset members for the specified terminology and code.

        This endpoint will be deprecated in v2 in favor of a top level subset member endpoint.

        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code for a subset concept in the specified terminology, e.g. 'C157225' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subset_members1_serialize(
            terminology=terminology,
            code=code,
            from_record=from_record,
            page_size=page_size,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_subset_members1_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code for a subset concept in the specified terminology, e.g. 'C157225' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            from_record: Annotated[Optional[StrictInt], Field(description="Start index of the search results")] = None,
            page_size: Annotated[Optional[StrictInt], Field(description="Max number of results to return")] = None,
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get subset members for the specified terminology and code.

        This endpoint will be deprecated in v2 in favor of a top level subset member endpoint.

        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code for a subset concept in the specified terminology, e.g. 'C157225' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param from_record: Start index of the search results
        :type from_record: int
        :param page_size: Max number of results to return
        :type page_size: int
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, associations, children, definitions, disjointWith, history, inverseAssociations, inverseRoles, maps, parents, properties, roles, synonyms. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subset_members1_serialize(
            terminology=terminology,
            code=code,
            from_record=from_record,
            page_size=page_size,
            include=include,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "RestException",
            '200': "List[Concept]",
            '417': "RestException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_subset_members1_serialize(
            self,
            terminology,
            code,
            from_record,
            page_size,
            include,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if from_record is not None:
            _query_params.append(('fromRecord', from_record))

        if page_size is not None:
            _query_params.append(('pageSize', page_size))

        if include is not None:
            _query_params.append(('include', include))

        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/subsetMembers/{code}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_subtree(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            limit: Annotated[Optional[StrictInt], Field(
                description="If set to an integer (between <i>1</i> and <i>100</i>), subtrees and siblings at each level will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[HierarchyNode]:
        """Get the entire subtree from the root node to the specified code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param limit: If set to an integer (between <i>1</i> and <i>100</i>), subtrees and siblings at each level will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.
        :type limit: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subtree_serialize(
            terminology=terminology,
            code=code,
            limit=limit,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "List[HierarchyNode]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_subtree_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            limit: Annotated[Optional[StrictInt], Field(
                description="If set to an integer (between <i>1</i> and <i>100</i>), subtrees and siblings at each level will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[HierarchyNode]]:
        """Get the entire subtree from the root node to the specified code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param limit: If set to an integer (between <i>1</i> and <i>100</i>), subtrees and siblings at each level will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.
        :type limit: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subtree_serialize(
            terminology=terminology,
            code=code,
            limit=limit,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "List[HierarchyNode]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_subtree_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            limit: Annotated[Optional[StrictInt], Field(
                description="If set to an integer (between <i>1</i> and <i>100</i>), subtrees and siblings at each level will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the entire subtree from the root node to the specified code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param limit: If set to an integer (between <i>1</i> and <i>100</i>), subtrees and siblings at each level will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.
        :type limit: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subtree_serialize(
            terminology=terminology,
            code=code,
            limit=limit,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "List[HierarchyNode]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_subtree_serialize(
            self,
            terminology,
            code,
            limit,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if limit is not None:
            _query_params.append(('limit', limit))

        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/subtree',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_subtree_children(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            limit: Annotated[Optional[StrictInt], Field(
                description="If set to an integer (between <i>1</i> and <i>100</i>), children will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[HierarchyNode]:
        """Get the entire subtree from the root node to the specified code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param limit: If set to an integer (between <i>1</i> and <i>100</i>), children will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.
        :type limit: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subtree_children_serialize(
            terminology=terminology,
            code=code,
            limit=limit,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "List[HierarchyNode]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_subtree_children_with_http_info(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            limit: Annotated[Optional[StrictInt], Field(
                description="If set to an integer (between <i>1</i> and <i>100</i>), children will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[HierarchyNode]]:
        """Get the entire subtree from the root node to the specified code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param limit: If set to an integer (between <i>1</i> and <i>100</i>), children will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.
        :type limit: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subtree_children_serialize(
            terminology=terminology,
            code=code,
            limit=limit,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "List[HierarchyNode]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_subtree_children_without_preload_content(
            self,
            terminology: Annotated[StrictStr, Field(description="Terminology, e.g. 'ncit'")],
            code: Annotated[StrictStr, Field(
                description="Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>.")],
            limit: Annotated[Optional[StrictInt], Field(
                description="If set to an integer (between <i>1</i> and <i>100</i>), children will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.")] = None,
            x_evsrestapi_license_key: Annotated[Optional[StrictStr], Field(
                description="Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the entire subtree from the root node to the specified code


        :param terminology: Terminology, e.g. 'ncit' (required)
        :type terminology: str
        :param code: Code in the specified terminology, e.g. 'C3224' for <i>ncit</i>. This call is only meaningful for <i>ncit</i>. (required)
        :type code: str
        :param limit: If set to an integer (between <i>1</i> and <i>100</i>), children will be limited to the specified number of entries. Thus a user interface can quickly retrieve initial data for a subtree and then call back for more data. An extra placeholder entry with just a <i>ct</i> field will be included to indicate the total count.
        :type limit: int
        :param x_evsrestapi_license_key: Required license information for restricted terminologies. <a href='https://github.com/NCIEVS/evsrestapi-client-SDK/blob/master/doc/LICENSE.md' target='_blank'>See here for detailed information</a>.
        :type x_evsrestapi_license_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subtree_children_serialize(
            terminology=terminology,
            code=code,
            limit=limit,
            x_evsrestapi_license_key=x_evsrestapi_license_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "RestException",
            '404': "RestException",
            '200': "List[HierarchyNode]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_subtree_children_serialize(
            self,
            terminology,
            code,
            limit,
            x_evsrestapi_license_key,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if limit is not None:
            _query_params.append(('limit', limit))

        # process the header parameters
        if x_evsrestapi_license_key is not None:
            _header_params['X-EVSRESTAPI-License-Key'] = x_evsrestapi_license_key
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/concept/{terminology}/{code}/subtree/children',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )
