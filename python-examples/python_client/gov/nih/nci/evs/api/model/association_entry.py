# coding: utf-8

"""
    NCI EVS Rest API

    Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>

    The version of the OpenAPI document: 1.7.2.RELEASE
    Contact: NCIAppSupport@nih.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.qualifier import Qualifier
from typing import Optional, Set
from typing_extensions import Self

class AssociationEntry(BaseModel):
    """
    Represents an entry in a table of associations between two concepts
    """ # noqa: E501
    uri: Optional[StrictStr] = Field(default=None, description="URI for this element in an rdf-based source file")
    ct: Optional[StrictInt] = Field(default=None, description="Used to indicate the total amount of data in cases where a limit is being applied")
    code: Optional[StrictStr] = Field(default=None, description="Code on the 'from' side of the association")
    type: Optional[StrictStr] = Field(default=None, description="Relationship type")
    related_code: Optional[StrictStr] = Field(default=None, description="Code on the 'to' side of the association", alias="relatedCode")
    related_name: Optional[StrictStr] = Field(default=None, description="Preferred name of the related code", alias="relatedName")
    source: Optional[StrictStr] = Field(default=None, description="Relationship source")
    highlight: Optional[StrictStr] = Field(default=None, description="Used by search calls to provide information for highlighting a view of results")
    qualifiers: Optional[List[Qualifier]] = Field(default=None, description="Type/value qualifiers on the relationship")
    terminology: Optional[StrictStr] = Field(default=None, description="Terminology abbreviation, e.g. 'nci'")
    version: Optional[StrictStr] = Field(default=None, description="Terminology version, e.g. '23.11d'")
    association: Optional[StrictStr] = Field(default=None, description="Type of relationship between code and related code")
    name: Optional[StrictStr] = Field(default=None, description="Preferred name of the code")
    __properties: ClassVar[List[str]] = ["uri", "ct", "code", "type", "relatedCode", "relatedName", "source", "highlight", "qualifiers", "terminology", "version", "association", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssociationEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in qualifiers (list)
        _items = []
        if self.qualifiers:
            for _item in self.qualifiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['qualifiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssociationEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "ct": obj.get("ct"),
            "code": obj.get("code"),
            "type": obj.get("type"),
            "relatedCode": obj.get("relatedCode"),
            "relatedName": obj.get("relatedName"),
            "source": obj.get("source"),
            "highlight": obj.get("highlight"),
            "qualifiers": [Qualifier.from_dict(_item) for _item in obj["qualifiers"]] if obj.get("qualifiers") is not None else None,
            "terminology": obj.get("terminology"),
            "version": obj.get("version"),
            "association": obj.get("association"),
            "name": obj.get("name")
        })
        return _obj


