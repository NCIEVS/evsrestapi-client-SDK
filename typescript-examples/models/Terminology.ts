/**
 * NCI EVS Rest API
 * Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>
 *
 * OpenAPI spec version: 2.1.0.RELEASE
 * Contact: NCIAppSupport@nih.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { TerminologyMetadata } from '../models/TerminologyMetadata';
import { HttpFile } from '../http/http';

/**
* Represents a terminology loaded into the API
*/
export class Terminology {
    /**
    * URI for this element in an rdf-based source file
    */
    'uri'?: string;
    /**
    * Used to indicate the total amount of data in cases where a limit is being applied
    */
    'ct'?: number;
    /**
    * Terminology abbreviation, e.g. \'ncit\'
    */
    'terminology'?: string;
    /**
    * Terminology version, e.g. \'23.11d\'
    */
    'version'?: string;
    /**
    * Terminology publication/release date
    */
    'date'?: string;
    /**
    * Terminology name
    */
    'name'?: string;
    /**
    * Terminology description
    */
    'description'?: string;
    /**
    * Name of the RDF triplestore graph if this data is backed by a triplestore
    */
    'graph'?: string;
    /**
    * Underscore-separated value for terminology and version used by the API to precisely pinpoint a particular version, e.g. \'ncit_23.11d\'
    */
    'terminologyVersion'?: string;
    /**
    * Indicates whether this is the latest version
    */
    'latest'?: boolean;
    /**
    * Additional terminology tags
    */
    'tags'?: { [key: string]: string; };
    /**
    * for internal use
    */
    'indexName'?: string;
    /**
    * for internal use
    */
    'objectIndexName'?: string;
    'metadata'?: TerminologyMetadata;
    /**
    * Indicates whether the terminology can be used with SPARQL
    */
    'sparqlFlag'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "uri",
            "baseName": "uri",
            "type": "string",
            "format": ""
        },
        {
            "name": "ct",
            "baseName": "ct",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "terminology",
            "baseName": "terminology",
            "type": "string",
            "format": ""
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string",
            "format": ""
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "graph",
            "baseName": "graph",
            "type": "string",
            "format": ""
        },
        {
            "name": "terminologyVersion",
            "baseName": "terminologyVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "latest",
            "baseName": "latest",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "indexName",
            "baseName": "indexName",
            "type": "string",
            "format": ""
        },
        {
            "name": "objectIndexName",
            "baseName": "objectIndexName",
            "type": "string",
            "format": ""
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "TerminologyMetadata",
            "format": ""
        },
        {
            "name": "sparqlFlag",
            "baseName": "sparqlFlag",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Terminology.attributeTypeMap;
    }

    public constructor() {
    }
}

