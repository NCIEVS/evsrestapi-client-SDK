/**
 * NCI EVS Rest API
 * Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>
 *
 * OpenAPI spec version: 2.1.0.RELEASE
 * Contact: NCIAppSupport@nih.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* Represents additional terminology metadata
*/
export class TerminologyMetadata {
    /**
    * URI for this element in an rdf-based source file
    */
    'uri'?: string;
    /**
    * Used to indicate the total amount of data in cases where a limit is being applied
    */
    'ct'?: number;
    /**
    * Human-readable name for the terminology to use in a UI label
    */
    'uiLabel'?: string;
    /**
    * Max number of versions to keep at the same time
    */
    'maxVersions'?: number;
    /**
    * Label for the loader used to populate this data
    */
    'loader'?: string;
    /**
    * Concept status values used by the terminology
    */
    'conceptStatuses'?: Array<string>;
    'excludedProperties'?: Set<string>;
    /**
    * Concept status value for retired concepts
    */
    'retiredStatusValue'?: string;
    /**
    * Metadata for displaying concept
    */
    'detailsColumns'?: { [key: string]: boolean; };
    /**
    * Indicates whether or not the terminology has a hierarchy
    */
    'hierarchy'?: boolean;
    /**
    * Indicates role codes that are reinterpreted as parent/child
    */
    'hierarchyRoles'?: Set<string>;
    /**
    * Indicates whether or not the terminology has history records
    */
    'history'?: boolean;
    /**
    * Count of included sources
    */
    'sourceCt'?: number;
    /**
    * Metadata for downloading a subset
    */
    'subsetLink'?: string;
    /**
    * License text for the UI
    */
    'licenseText'?: string;
    /**
    * Metadata for concept display
    */
    'metaConceptField'?: string;
    /**
    * Metadata for concept display
    */
    'codeLabel'?: string;
    /**
    * Metadata for landing page welcome text
    */
    'welcomeText'?: string;
    'synonymTermGroup'?: string;
    'termGroups'?: { [key: string]: string; };
    'preferredTermGroups'?: Array<string>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "uri",
            "baseName": "uri",
            "type": "string",
            "format": ""
        },
        {
            "name": "ct",
            "baseName": "ct",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "uiLabel",
            "baseName": "uiLabel",
            "type": "string",
            "format": ""
        },
        {
            "name": "maxVersions",
            "baseName": "maxVersions",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "loader",
            "baseName": "loader",
            "type": "string",
            "format": ""
        },
        {
            "name": "conceptStatuses",
            "baseName": "conceptStatuses",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "excludedProperties",
            "baseName": "excludedProperties",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "retiredStatusValue",
            "baseName": "retiredStatusValue",
            "type": "string",
            "format": ""
        },
        {
            "name": "detailsColumns",
            "baseName": "detailsColumns",
            "type": "{ [key: string]: boolean; }",
            "format": ""
        },
        {
            "name": "hierarchy",
            "baseName": "hierarchy",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "hierarchyRoles",
            "baseName": "hierarchyRoles",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "history",
            "baseName": "history",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "sourceCt",
            "baseName": "sourceCt",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "subsetLink",
            "baseName": "subsetLink",
            "type": "string",
            "format": ""
        },
        {
            "name": "licenseText",
            "baseName": "licenseText",
            "type": "string",
            "format": ""
        },
        {
            "name": "metaConceptField",
            "baseName": "metaConceptField",
            "type": "string",
            "format": ""
        },
        {
            "name": "codeLabel",
            "baseName": "codeLabel",
            "type": "string",
            "format": ""
        },
        {
            "name": "welcomeText",
            "baseName": "welcomeText",
            "type": "string",
            "format": ""
        },
        {
            "name": "synonymTermGroup",
            "baseName": "synonymTermGroup",
            "type": "string",
            "format": ""
        },
        {
            "name": "termGroups",
            "baseName": "termGroups",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "preferredTermGroups",
            "baseName": "preferredTermGroups",
            "type": "Array<string>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return TerminologyMetadata.attributeTypeMap;
    }

    public constructor() {
    }
}

