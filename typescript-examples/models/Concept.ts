/**
 * NCI EVS Rest API
 * Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>
 *
 * OpenAPI spec version: 1.7.2.RELEASE
 * Contact: NCIAppSupport@nih.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Association } from '../models/Association';
import { ConceptMap } from '../models/ConceptMap';
import { Definition } from '../models/Definition';
import { DisjointWith } from '../models/DisjointWith';
import { History } from '../models/History';
import { Paths } from '../models/Paths';
import { Property } from '../models/Property';
import { Qualifier } from '../models/Qualifier';
import { Role } from '../models/Role';
import { Synonym } from '../models/Synonym';
import { HttpFile } from '../http/http';

/**
* Represents a concept in a terminology
*/
export class Concept {
    /**
    * URI for this element in an rdf-based source file
    */
    'uri'?: string;
    /**
    * Used to indicate the total amount of data in cases where a limit is being applied
    */
    'ct'?: number;
    /**
    * Code (unique identifier) for this meaning
    */
    'code'?: string;
    /**
    * Preferred name for the code
    */
    'name'?: string;
    /**
    * Terminology abbreviation, e.g. \'nci\'
    */
    'terminology'?: string;
    /**
    * Terminology version, e.g. \'23.11d\'
    */
    'version'?: string;
    /**
    * Level of depth in a hierarchy (when this object is used to represent an element in a path)
    */
    'level'?: number;
    /**
    * Used by search calls to provide information for highlighting a view of results
    */
    'highlight'?: string;
    /**
    * Link to download data for a subset, used when the concept represents subset metadata
    */
    'subsetLink'?: string;
    /**
    * Metadata for downloading a mapset
    */
    'mapsetLink'?: string;
    /**
    * Status value for the concept, e.g. Retired_Concept
    */
    'conceptStatus'?: string;
    /**
    * Associations from this concept to other ones
    */
    'source'?: string;
    /**
    * Indicates whether concept is a leaf node
    */
    'leaf'?: boolean;
    /**
    * Indicates whether the concept is active
    */
    'active'?: boolean;
    /**
    * Synonyms, or all of the names for this concept, including the preferred name
    */
    'synonyms'?: Array<Synonym>;
    /**
    * Text definitions
    */
    'definitions'?: Array<Definition>;
    /**
    * Key/value properties
    */
    'properties'?: Array<Property>;
    /**
    * Child concepts in the hierarchy
    */
    'children'?: Array<Concept>;
    /**
    * Parent concepts in the hierarchy
    */
    'parents'?: Array<Concept>;
    /**
    * Descendant concepts in the hierarchy
    */
    'descendants'?: Array<Concept>;
    /**
    * Qualifiers for use when a concept is used as a parent/child - to indicate RELA for NCIm-derived content
    */
    'qualifiers'?: Array<Qualifier>;
    /**
    * Associations from this concept to other ones
    */
    'associations'?: Array<Association>;
    /**
    * Associations to this concept from other ones
    */
    'inverseAssociations'?: Array<Association>;
    /**
    * Roles from this concept to other ones
    */
    'roles'?: Array<Role>;
    /**
    * Assertions of disjointness with respect to other concepts
    */
    'disjointWith'?: Array<DisjointWith>;
    /**
    * Roles to this concept from other ones
    */
    'inverseRoles'?: Array<Role>;
    /**
    * History records
    */
    'history'?: Array<History>;
    /**
    * Maps from this concept to concepts in other terminologies
    */
    'maps'?: Array<ConceptMap>;
    'paths'?: Paths;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "uri",
            "baseName": "uri",
            "type": "string",
            "format": ""
        },
        {
            "name": "ct",
            "baseName": "ct",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "terminology",
            "baseName": "terminology",
            "type": "string",
            "format": ""
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string",
            "format": ""
        },
        {
            "name": "level",
            "baseName": "level",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "highlight",
            "baseName": "highlight",
            "type": "string",
            "format": ""
        },
        {
            "name": "subsetLink",
            "baseName": "subsetLink",
            "type": "string",
            "format": ""
        },
        {
            "name": "mapsetLink",
            "baseName": "mapsetLink",
            "type": "string",
            "format": ""
        },
        {
            "name": "conceptStatus",
            "baseName": "conceptStatus",
            "type": "string",
            "format": ""
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string",
            "format": ""
        },
        {
            "name": "leaf",
            "baseName": "leaf",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "synonyms",
            "baseName": "synonyms",
            "type": "Array<Synonym>",
            "format": ""
        },
        {
            "name": "definitions",
            "baseName": "definitions",
            "type": "Array<Definition>",
            "format": ""
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "Array<Property>",
            "format": ""
        },
        {
            "name": "children",
            "baseName": "children",
            "type": "Array<Concept>",
            "format": ""
        },
        {
            "name": "parents",
            "baseName": "parents",
            "type": "Array<Concept>",
            "format": ""
        },
        {
            "name": "descendants",
            "baseName": "descendants",
            "type": "Array<Concept>",
            "format": ""
        },
        {
            "name": "qualifiers",
            "baseName": "qualifiers",
            "type": "Array<Qualifier>",
            "format": ""
        },
        {
            "name": "associations",
            "baseName": "associations",
            "type": "Array<Association>",
            "format": ""
        },
        {
            "name": "inverseAssociations",
            "baseName": "inverseAssociations",
            "type": "Array<Association>",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<Role>",
            "format": ""
        },
        {
            "name": "disjointWith",
            "baseName": "disjointWith",
            "type": "Array<DisjointWith>",
            "format": ""
        },
        {
            "name": "inverseRoles",
            "baseName": "inverseRoles",
            "type": "Array<Role>",
            "format": ""
        },
        {
            "name": "history",
            "baseName": "history",
            "type": "Array<History>",
            "format": ""
        },
        {
            "name": "maps",
            "baseName": "maps",
            "type": "Array<ConceptMap>",
            "format": ""
        },
        {
            "name": "paths",
            "baseName": "paths",
            "type": "Paths",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Concept.attributeTypeMap;
    }

    public constructor() {
    }
}

