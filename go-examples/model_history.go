/*
NCI EVS Rest API

Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>

API version: 1.7.2.RELEASE
Contact: NCIAppSupport@nih.gov
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evs

import (
	"encoding/json"
)

// checks if the History type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &History{}

// History Represents a history record, generally for a retired concept
type History struct {
	// URI for this element in an rdf-based source file
	Uri *string `json:"uri,omitempty"`
	// Used to indicate the total amount of data in cases where a limit is being applied
	Ct *int32 `json:"ct,omitempty"`
	// Code for this history record
	Code *string `json:"code,omitempty"`
	// Last known preferred name for the code
	Name *string `json:"name,omitempty"`
	// Indicates the history action, e.g. 'merge', 'active', 'retire', 'SY', 'RB', etc.
	Action *string `json:"action,omitempty"`
	// Date of the history record
	Date *string `json:"date,omitempty"`
	// Code replacing this code
	ReplacementCode *string `json:"replacementCode,omitempty"`
	// Preferred name of the code replacing this code
	ReplacementName *string `json:"replacementName,omitempty"`
}

// NewHistory instantiates a new History object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistory() *History {
	this := History{}
	return &this
}

// NewHistoryWithDefaults instantiates a new History object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryWithDefaults() *History {
	this := History{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *History) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *History) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *History) SetUri(v string) {
	o.Uri = &v
}

// GetCt returns the Ct field value if set, zero value otherwise.
func (o *History) GetCt() int32 {
	if o == nil || IsNil(o.Ct) {
		var ret int32
		return ret
	}
	return *o.Ct
}

// GetCtOk returns a tuple with the Ct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetCtOk() (*int32, bool) {
	if o == nil || IsNil(o.Ct) {
		return nil, false
	}
	return o.Ct, true
}

// HasCt returns a boolean if a field has been set.
func (o *History) HasCt() bool {
	if o != nil && !IsNil(o.Ct) {
		return true
	}

	return false
}

// SetCt gets a reference to the given int32 and assigns it to the Ct field.
func (o *History) SetCt(v int32) {
	o.Ct = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *History) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *History) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *History) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *History) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *History) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *History) SetName(v string) {
	o.Name = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *History) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *History) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *History) SetAction(v string) {
	o.Action = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *History) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *History) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *History) SetDate(v string) {
	o.Date = &v
}

// GetReplacementCode returns the ReplacementCode field value if set, zero value otherwise.
func (o *History) GetReplacementCode() string {
	if o == nil || IsNil(o.ReplacementCode) {
		var ret string
		return ret
	}
	return *o.ReplacementCode
}

// GetReplacementCodeOk returns a tuple with the ReplacementCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetReplacementCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacementCode) {
		return nil, false
	}
	return o.ReplacementCode, true
}

// HasReplacementCode returns a boolean if a field has been set.
func (o *History) HasReplacementCode() bool {
	if o != nil && !IsNil(o.ReplacementCode) {
		return true
	}

	return false
}

// SetReplacementCode gets a reference to the given string and assigns it to the ReplacementCode field.
func (o *History) SetReplacementCode(v string) {
	o.ReplacementCode = &v
}

// GetReplacementName returns the ReplacementName field value if set, zero value otherwise.
func (o *History) GetReplacementName() string {
	if o == nil || IsNil(o.ReplacementName) {
		var ret string
		return ret
	}
	return *o.ReplacementName
}

// GetReplacementNameOk returns a tuple with the ReplacementName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetReplacementNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacementName) {
		return nil, false
	}
	return o.ReplacementName, true
}

// HasReplacementName returns a boolean if a field has been set.
func (o *History) HasReplacementName() bool {
	if o != nil && !IsNil(o.ReplacementName) {
		return true
	}

	return false
}

// SetReplacementName gets a reference to the given string and assigns it to the ReplacementName field.
func (o *History) SetReplacementName(v string) {
	o.ReplacementName = &v
}

func (o History) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o History) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Ct) {
		toSerialize["ct"] = o.Ct
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.ReplacementCode) {
		toSerialize["replacementCode"] = o.ReplacementCode
	}
	if !IsNil(o.ReplacementName) {
		toSerialize["replacementName"] = o.ReplacementName
	}
	return toSerialize, nil
}

type NullableHistory struct {
	value *History
	isSet bool
}

func (v NullableHistory) Get() *History {
	return v.value
}

func (v *NullableHistory) Set(val *History) {
	v.value = val
	v.isSet = true
}

func (v NullableHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistory(val *History) *NullableHistory {
	return &NullableHistory{value: val, isSet: true}
}

func (v NullableHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


