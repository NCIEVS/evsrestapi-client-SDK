/*
NCI EVS Rest API

Testing ConceptEndpointsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package evs

import (
	"context"
	"strings"
	"testing"

	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_evs_ConceptEndpointsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	terminology := "ncit"
	code := "C3224"

	t.Run("Test ConceptEndpointsAPIService GetAssociationEntries", func(t *testing.T) {

		// ARRANGE
		codeOrLabel := "A5"
		var fromRecord int32 = 0
		var pageSize int32 = 100
		expectedRelatedName := "Naluzotan Hydrochloride"
		containsExpectedName := false

		// ACT
		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetAssociationEntries(context.Background(), terminology, codeOrLabel).FromRecord(fromRecord).PageSize(pageSize).Execute()

		// ASSERT
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		// Check if the expected related name exists in the result
		for _, entry := range resp.AssociationEntries {
			if strings.Contains(entry.GetRelatedName(), expectedRelatedName) {
				containsExpectedName = true
				break
			}
		}

		assert.True(t, containsExpectedName, "FAIL: Response doesn't contain the expected related name")
	})

	t.Run("Test ConceptEndpointsAPIService GetAssociations1", func(t *testing.T) {

		expected_related_name := "CDISC SEND Terminology"
		expected_type := "Concept_In_Subset"

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetAssociations1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		var assoc = resp[0]
		assert.NotNil(t, assoc)
		assert.Equal(t, expected_related_name, assoc.GetRelatedName())
		assert.Equal(t, expected_type, assoc.GetType())

	})

	t.Run("Test ConceptEndpointsAPIService GetChildren", func(t *testing.T) {

		expected_name := "Melanoma"

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetChildren(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		for _, entry := range resp {
			assert.True(t, strings.Contains(entry.GetName(), expected_name))
		}

	})

	t.Run("Test ConceptEndpointsAPIService GetConcept", func(t *testing.T) {

		expected_name := "Melanoma"

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetConcept(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		assert.Equal(t, resp.GetName(), expected_name)

	})

	t.Run("Test ConceptEndpointsAPIService GetConcepts", func(t *testing.T) {

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetConcepts(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetDescendants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetDescendants(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetDisjointWith", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetDisjointWith(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetHistory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetHistory(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetInverseAssociations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetInverseAssociations(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetInverseRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetInverseRoles(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetMaps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetMaps(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetParents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetParents(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetPathsFromRoot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetPathsFromRoot(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetPathsToAncestor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string
		var ancestorCode string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetPathsToAncestor(context.Background(), terminology, code, ancestorCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetPathsToRoot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetPathsToRoot(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetRoles1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetRoles1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetRoots", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetRoots(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetSubsetMembers1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetSubsetMembers1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetSubtree", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetSubtree(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetSubtreeChildren", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetSubtreeChildren(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
