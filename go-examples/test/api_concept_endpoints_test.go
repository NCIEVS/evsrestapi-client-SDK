/*
NCI EVS Rest API

Testing ConceptEndpointsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package evs

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_evs_ConceptEndpointsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConceptEndpointsAPIService GetAssociationEntries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var codeOrLabel string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetAssociationEntries(context.Background(), terminology, codeOrLabel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetAssociations1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetAssociations1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetChildren", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetChildren(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetConcept", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetConcept(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetConcepts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetConcepts(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetDescendants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetDescendants(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetDisjointWith", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetDisjointWith(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetHistory(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetInverseAssociations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetInverseAssociations(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetInverseRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetInverseRoles(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetMaps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetMaps(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetParents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetParents(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetPathsFromRoot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetPathsFromRoot(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetPathsToAncestor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string
		var ancestorCode string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetPathsToAncestor(context.Background(), terminology, code, ancestorCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetPathsToRoot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetPathsToRoot(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetRoles1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetRoles1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetRoots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetRoots(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetSubsetMembers1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetSubsetMembers1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetSubtree", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetSubtree(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConceptEndpointsAPIService GetSubtreeChildren", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.ConceptEndpointsAPI.GetSubtreeChildren(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
