/*
NCI EVS Rest API

Testing MetadataEndpointsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package evs

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_evs_MetadataEndpointsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MetadataEndpointsAPIService GetAssociation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var codeOrName string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetAssociation(context.Background(), terminology, codeOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetAssociations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetAssociations(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetConceptStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetConceptStatuses(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetDefinitionSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetDefinitionSources(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetDefinitionType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var codeOrName string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetDefinitionType(context.Background(), terminology, codeOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetDefinitionTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetDefinitionTypes(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetProperties", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetProperties(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetProperty", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var codeOrName string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetProperty(context.Background(), terminology, codeOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetQualifier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var codeOrName string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetQualifier(context.Background(), terminology, codeOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetQualifierValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var codeOrName string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetQualifierValues(context.Background(), terminology, codeOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetQualifiers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetQualifiers(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var codeOrName string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetRole(context.Background(), terminology, codeOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetRoles(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetSourceStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var source string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetSourceStats(context.Background(), terminology, source).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetSubset1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetSubset1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetSubsets1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetSubsets1(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetSynonymSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetSynonymSources(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetSynonymType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var codeOrName string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetSynonymType(context.Background(), terminology, codeOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetSynonymTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetSynonymTypes(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetTermTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetTermTypes(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetTerminologies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetTerminologies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataEndpointsAPIService GetWelcomeText", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.MetadataEndpointsAPI.GetWelcomeText(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
