/*
NCI EVS Rest API

Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>

API version: 1.7.2.RELEASE
Contact: NCIAppSupport@nih.gov
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evs

import (
	"encoding/json"
)

// checks if the Terminology type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Terminology{}

// Terminology Represents a terminology loaded into the API
type Terminology struct {
	// URI for this element in an rdf-based source file
	Uri *string `json:"uri,omitempty"`
	// Used to indicate the total amount of data in cases where a limit is being applied
	Ct *int32 `json:"ct,omitempty"`
	// Terminology abbreviation, e.g. 'ncit'
	Terminology *string `json:"terminology,omitempty"`
	// Terminology version, e.g. '23.11d'
	Version *string `json:"version,omitempty"`
	// Terminology publication/release date
	Date *string `json:"date,omitempty"`
	// Terminology name
	Name *string `json:"name,omitempty"`
	// Terminology description
	Description *string `json:"description,omitempty"`
	// Name of the RDF triplestore graph if this data is backed by a triplestore
	Graph *string `json:"graph,omitempty"`
	// Underscore-separated value for terminology and version used by the API to precisely pinpoint a particular version, e.g. 'ncit_23.11d'
	TerminologyVersion *string `json:"terminologyVersion,omitempty"`
	// Indicates whether this is the latest version
	Latest *bool `json:"latest,omitempty"`
	// Additional terminology tags
	Tags *map[string]string `json:"tags,omitempty"`
	// for internal use
	IndexName *string `json:"indexName,omitempty"`
	// for internal use
	ObjectIndexName *string `json:"objectIndexName,omitempty"`
	Metadata *TerminologyMetadata `json:"metadata,omitempty"`
	// Indicates whether the terminology can be used with SPARQL
	SparqlFlag *bool `json:"sparqlFlag,omitempty"`
}

// NewTerminology instantiates a new Terminology object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerminology() *Terminology {
	this := Terminology{}
	return &this
}

// NewTerminologyWithDefaults instantiates a new Terminology object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerminologyWithDefaults() *Terminology {
	this := Terminology{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *Terminology) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *Terminology) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *Terminology) SetUri(v string) {
	o.Uri = &v
}

// GetCt returns the Ct field value if set, zero value otherwise.
func (o *Terminology) GetCt() int32 {
	if o == nil || IsNil(o.Ct) {
		var ret int32
		return ret
	}
	return *o.Ct
}

// GetCtOk returns a tuple with the Ct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetCtOk() (*int32, bool) {
	if o == nil || IsNil(o.Ct) {
		return nil, false
	}
	return o.Ct, true
}

// HasCt returns a boolean if a field has been set.
func (o *Terminology) HasCt() bool {
	if o != nil && !IsNil(o.Ct) {
		return true
	}

	return false
}

// SetCt gets a reference to the given int32 and assigns it to the Ct field.
func (o *Terminology) SetCt(v int32) {
	o.Ct = &v
}

// GetTerminology returns the Terminology field value if set, zero value otherwise.
func (o *Terminology) GetTerminology() string {
	if o == nil || IsNil(o.Terminology) {
		var ret string
		return ret
	}
	return *o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetTerminologyOk() (*string, bool) {
	if o == nil || IsNil(o.Terminology) {
		return nil, false
	}
	return o.Terminology, true
}

// HasTerminology returns a boolean if a field has been set.
func (o *Terminology) HasTerminology() bool {
	if o != nil && !IsNil(o.Terminology) {
		return true
	}

	return false
}

// SetTerminology gets a reference to the given string and assigns it to the Terminology field.
func (o *Terminology) SetTerminology(v string) {
	o.Terminology = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Terminology) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Terminology) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Terminology) SetVersion(v string) {
	o.Version = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Terminology) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Terminology) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *Terminology) SetDate(v string) {
	o.Date = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Terminology) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Terminology) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Terminology) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Terminology) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Terminology) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Terminology) SetDescription(v string) {
	o.Description = &v
}

// GetGraph returns the Graph field value if set, zero value otherwise.
func (o *Terminology) GetGraph() string {
	if o == nil || IsNil(o.Graph) {
		var ret string
		return ret
	}
	return *o.Graph
}

// GetGraphOk returns a tuple with the Graph field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetGraphOk() (*string, bool) {
	if o == nil || IsNil(o.Graph) {
		return nil, false
	}
	return o.Graph, true
}

// HasGraph returns a boolean if a field has been set.
func (o *Terminology) HasGraph() bool {
	if o != nil && !IsNil(o.Graph) {
		return true
	}

	return false
}

// SetGraph gets a reference to the given string and assigns it to the Graph field.
func (o *Terminology) SetGraph(v string) {
	o.Graph = &v
}

// GetTerminologyVersion returns the TerminologyVersion field value if set, zero value otherwise.
func (o *Terminology) GetTerminologyVersion() string {
	if o == nil || IsNil(o.TerminologyVersion) {
		var ret string
		return ret
	}
	return *o.TerminologyVersion
}

// GetTerminologyVersionOk returns a tuple with the TerminologyVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetTerminologyVersionOk() (*string, bool) {
	if o == nil || IsNil(o.TerminologyVersion) {
		return nil, false
	}
	return o.TerminologyVersion, true
}

// HasTerminologyVersion returns a boolean if a field has been set.
func (o *Terminology) HasTerminologyVersion() bool {
	if o != nil && !IsNil(o.TerminologyVersion) {
		return true
	}

	return false
}

// SetTerminologyVersion gets a reference to the given string and assigns it to the TerminologyVersion field.
func (o *Terminology) SetTerminologyVersion(v string) {
	o.TerminologyVersion = &v
}

// GetLatest returns the Latest field value if set, zero value otherwise.
func (o *Terminology) GetLatest() bool {
	if o == nil || IsNil(o.Latest) {
		var ret bool
		return ret
	}
	return *o.Latest
}

// GetLatestOk returns a tuple with the Latest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetLatestOk() (*bool, bool) {
	if o == nil || IsNil(o.Latest) {
		return nil, false
	}
	return o.Latest, true
}

// HasLatest returns a boolean if a field has been set.
func (o *Terminology) HasLatest() bool {
	if o != nil && !IsNil(o.Latest) {
		return true
	}

	return false
}

// SetLatest gets a reference to the given bool and assigns it to the Latest field.
func (o *Terminology) SetLatest(v bool) {
	o.Latest = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Terminology) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Terminology) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *Terminology) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetIndexName returns the IndexName field value if set, zero value otherwise.
func (o *Terminology) GetIndexName() string {
	if o == nil || IsNil(o.IndexName) {
		var ret string
		return ret
	}
	return *o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetIndexNameOk() (*string, bool) {
	if o == nil || IsNil(o.IndexName) {
		return nil, false
	}
	return o.IndexName, true
}

// HasIndexName returns a boolean if a field has been set.
func (o *Terminology) HasIndexName() bool {
	if o != nil && !IsNil(o.IndexName) {
		return true
	}

	return false
}

// SetIndexName gets a reference to the given string and assigns it to the IndexName field.
func (o *Terminology) SetIndexName(v string) {
	o.IndexName = &v
}

// GetObjectIndexName returns the ObjectIndexName field value if set, zero value otherwise.
func (o *Terminology) GetObjectIndexName() string {
	if o == nil || IsNil(o.ObjectIndexName) {
		var ret string
		return ret
	}
	return *o.ObjectIndexName
}

// GetObjectIndexNameOk returns a tuple with the ObjectIndexName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetObjectIndexNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectIndexName) {
		return nil, false
	}
	return o.ObjectIndexName, true
}

// HasObjectIndexName returns a boolean if a field has been set.
func (o *Terminology) HasObjectIndexName() bool {
	if o != nil && !IsNil(o.ObjectIndexName) {
		return true
	}

	return false
}

// SetObjectIndexName gets a reference to the given string and assigns it to the ObjectIndexName field.
func (o *Terminology) SetObjectIndexName(v string) {
	o.ObjectIndexName = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Terminology) GetMetadata() TerminologyMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret TerminologyMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetMetadataOk() (*TerminologyMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Terminology) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given TerminologyMetadata and assigns it to the Metadata field.
func (o *Terminology) SetMetadata(v TerminologyMetadata) {
	o.Metadata = &v
}

// GetSparqlFlag returns the SparqlFlag field value if set, zero value otherwise.
func (o *Terminology) GetSparqlFlag() bool {
	if o == nil || IsNil(o.SparqlFlag) {
		var ret bool
		return ret
	}
	return *o.SparqlFlag
}

// GetSparqlFlagOk returns a tuple with the SparqlFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetSparqlFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.SparqlFlag) {
		return nil, false
	}
	return o.SparqlFlag, true
}

// HasSparqlFlag returns a boolean if a field has been set.
func (o *Terminology) HasSparqlFlag() bool {
	if o != nil && !IsNil(o.SparqlFlag) {
		return true
	}

	return false
}

// SetSparqlFlag gets a reference to the given bool and assigns it to the SparqlFlag field.
func (o *Terminology) SetSparqlFlag(v bool) {
	o.SparqlFlag = &v
}

func (o Terminology) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Terminology) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Ct) {
		toSerialize["ct"] = o.Ct
	}
	if !IsNil(o.Terminology) {
		toSerialize["terminology"] = o.Terminology
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Graph) {
		toSerialize["graph"] = o.Graph
	}
	if !IsNil(o.TerminologyVersion) {
		toSerialize["terminologyVersion"] = o.TerminologyVersion
	}
	if !IsNil(o.Latest) {
		toSerialize["latest"] = o.Latest
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.IndexName) {
		toSerialize["indexName"] = o.IndexName
	}
	if !IsNil(o.ObjectIndexName) {
		toSerialize["objectIndexName"] = o.ObjectIndexName
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.SparqlFlag) {
		toSerialize["sparqlFlag"] = o.SparqlFlag
	}
	return toSerialize, nil
}

type NullableTerminology struct {
	value *Terminology
	isSet bool
}

func (v NullableTerminology) Get() *Terminology {
	return v.value
}

func (v *NullableTerminology) Set(val *Terminology) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminology) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminology(val *Terminology) *NullableTerminology {
	return &NullableTerminology{value: val, isSet: true}
}

func (v NullableTerminology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


