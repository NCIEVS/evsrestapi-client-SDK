/*
NCI EVS Rest API

Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>

API version: 1.7.2.RELEASE
Contact: NCIAppSupport@nih.gov
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evs

import (
	"encoding/json"
)

// checks if the HierarchyNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HierarchyNode{}

// HierarchyNode Represents a node in a subtree rendering of the hierarchy
type HierarchyNode struct {
	// URI for this element in an rdf-based source file
	Uri *string `json:"uri,omitempty"`
	// Used to indicate the total amount of data in cases where a limit is being applied
	Ct *int32 `json:"ct,omitempty"`
	// Code of the hierarchy node
	Code *string `json:"code,omitempty"`
	// Code label for the hierarchy node
	Label *string `json:"label,omitempty"`
	// Indicates level of depth in the (respective) hierarchy
	Level *int32 `json:"level,omitempty"`
	// Indicates whether the code has children
	Leaf *bool `json:"leaf,omitempty"`
	// Indicates whether the node has been expanded
	Expanded *bool `json:"expanded,omitempty"`
	// Child nodes
	Children []HierarchyNode `json:"children,omitempty"`
}

// NewHierarchyNode instantiates a new HierarchyNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHierarchyNode() *HierarchyNode {
	this := HierarchyNode{}
	return &this
}

// NewHierarchyNodeWithDefaults instantiates a new HierarchyNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHierarchyNodeWithDefaults() *HierarchyNode {
	this := HierarchyNode{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *HierarchyNode) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNode) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *HierarchyNode) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *HierarchyNode) SetUri(v string) {
	o.Uri = &v
}

// GetCt returns the Ct field value if set, zero value otherwise.
func (o *HierarchyNode) GetCt() int32 {
	if o == nil || IsNil(o.Ct) {
		var ret int32
		return ret
	}
	return *o.Ct
}

// GetCtOk returns a tuple with the Ct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNode) GetCtOk() (*int32, bool) {
	if o == nil || IsNil(o.Ct) {
		return nil, false
	}
	return o.Ct, true
}

// HasCt returns a boolean if a field has been set.
func (o *HierarchyNode) HasCt() bool {
	if o != nil && !IsNil(o.Ct) {
		return true
	}

	return false
}

// SetCt gets a reference to the given int32 and assigns it to the Ct field.
func (o *HierarchyNode) SetCt(v int32) {
	o.Ct = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *HierarchyNode) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNode) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *HierarchyNode) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *HierarchyNode) SetCode(v string) {
	o.Code = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *HierarchyNode) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNode) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *HierarchyNode) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *HierarchyNode) SetLabel(v string) {
	o.Label = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *HierarchyNode) GetLevel() int32 {
	if o == nil || IsNil(o.Level) {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNode) GetLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *HierarchyNode) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *HierarchyNode) SetLevel(v int32) {
	o.Level = &v
}

// GetLeaf returns the Leaf field value if set, zero value otherwise.
func (o *HierarchyNode) GetLeaf() bool {
	if o == nil || IsNil(o.Leaf) {
		var ret bool
		return ret
	}
	return *o.Leaf
}

// GetLeafOk returns a tuple with the Leaf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNode) GetLeafOk() (*bool, bool) {
	if o == nil || IsNil(o.Leaf) {
		return nil, false
	}
	return o.Leaf, true
}

// HasLeaf returns a boolean if a field has been set.
func (o *HierarchyNode) HasLeaf() bool {
	if o != nil && !IsNil(o.Leaf) {
		return true
	}

	return false
}

// SetLeaf gets a reference to the given bool and assigns it to the Leaf field.
func (o *HierarchyNode) SetLeaf(v bool) {
	o.Leaf = &v
}

// GetExpanded returns the Expanded field value if set, zero value otherwise.
func (o *HierarchyNode) GetExpanded() bool {
	if o == nil || IsNil(o.Expanded) {
		var ret bool
		return ret
	}
	return *o.Expanded
}

// GetExpandedOk returns a tuple with the Expanded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNode) GetExpandedOk() (*bool, bool) {
	if o == nil || IsNil(o.Expanded) {
		return nil, false
	}
	return o.Expanded, true
}

// HasExpanded returns a boolean if a field has been set.
func (o *HierarchyNode) HasExpanded() bool {
	if o != nil && !IsNil(o.Expanded) {
		return true
	}

	return false
}

// SetExpanded gets a reference to the given bool and assigns it to the Expanded field.
func (o *HierarchyNode) SetExpanded(v bool) {
	o.Expanded = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *HierarchyNode) GetChildren() []HierarchyNode {
	if o == nil || IsNil(o.Children) {
		var ret []HierarchyNode
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNode) GetChildrenOk() ([]HierarchyNode, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *HierarchyNode) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []HierarchyNode and assigns it to the Children field.
func (o *HierarchyNode) SetChildren(v []HierarchyNode) {
	o.Children = v
}

func (o HierarchyNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HierarchyNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Ct) {
		toSerialize["ct"] = o.Ct
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Leaf) {
		toSerialize["leaf"] = o.Leaf
	}
	if !IsNil(o.Expanded) {
		toSerialize["expanded"] = o.Expanded
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

type NullableHierarchyNode struct {
	value *HierarchyNode
	isSet bool
}

func (v NullableHierarchyNode) Get() *HierarchyNode {
	return v.value
}

func (v *NullableHierarchyNode) Set(val *HierarchyNode) {
	v.value = val
	v.isSet = true
}

func (v NullableHierarchyNode) IsSet() bool {
	return v.isSet
}

func (v *NullableHierarchyNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHierarchyNode(val *HierarchyNode) *NullableHierarchyNode {
	return &NullableHierarchyNode{value: val, isSet: true}
}

func (v NullableHierarchyNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHierarchyNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


