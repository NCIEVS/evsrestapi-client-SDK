/*
NCI EVS Rest API

Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>

API version: 1.7.2.RELEASE
Contact: NCIAppSupport@nih.gov
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evs

import (
	"encoding/json"
)

// checks if the Association type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Association{}

// Association Represents a non-defining (in a logical sense) relationship between two concepts
type Association struct {
	// URI for this element in an rdf-based source file
	Uri *string `json:"uri,omitempty"`
	// Used to indicate the total amount of data in cases where a limit is being applied
	Ct *int32 `json:"ct,omitempty"`
	// Relationship type
	Type *string `json:"type,omitempty"`
	// Related code (the code on the other side of the relationship)
	RelatedCode *string `json:"relatedCode,omitempty"`
	// Preferred name of the related code
	RelatedName *string `json:"relatedName,omitempty"`
	// Relationship source
	Source *string `json:"source,omitempty"`
	// Used by search calls to provide information for highlighting a view of results
	Highlight *string `json:"highlight,omitempty"`
	// Type/value qualifiers on the relationship
	Qualifiers []Qualifier `json:"qualifiers,omitempty"`
}

// NewAssociation instantiates a new Association object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociation() *Association {
	this := Association{}
	return &this
}

// NewAssociationWithDefaults instantiates a new Association object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociationWithDefaults() *Association {
	this := Association{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *Association) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Association) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *Association) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *Association) SetUri(v string) {
	o.Uri = &v
}

// GetCt returns the Ct field value if set, zero value otherwise.
func (o *Association) GetCt() int32 {
	if o == nil || IsNil(o.Ct) {
		var ret int32
		return ret
	}
	return *o.Ct
}

// GetCtOk returns a tuple with the Ct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Association) GetCtOk() (*int32, bool) {
	if o == nil || IsNil(o.Ct) {
		return nil, false
	}
	return o.Ct, true
}

// HasCt returns a boolean if a field has been set.
func (o *Association) HasCt() bool {
	if o != nil && !IsNil(o.Ct) {
		return true
	}

	return false
}

// SetCt gets a reference to the given int32 and assigns it to the Ct field.
func (o *Association) SetCt(v int32) {
	o.Ct = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Association) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Association) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Association) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Association) SetType(v string) {
	o.Type = &v
}

// GetRelatedCode returns the RelatedCode field value if set, zero value otherwise.
func (o *Association) GetRelatedCode() string {
	if o == nil || IsNil(o.RelatedCode) {
		var ret string
		return ret
	}
	return *o.RelatedCode
}

// GetRelatedCodeOk returns a tuple with the RelatedCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Association) GetRelatedCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RelatedCode) {
		return nil, false
	}
	return o.RelatedCode, true
}

// HasRelatedCode returns a boolean if a field has been set.
func (o *Association) HasRelatedCode() bool {
	if o != nil && !IsNil(o.RelatedCode) {
		return true
	}

	return false
}

// SetRelatedCode gets a reference to the given string and assigns it to the RelatedCode field.
func (o *Association) SetRelatedCode(v string) {
	o.RelatedCode = &v
}

// GetRelatedName returns the RelatedName field value if set, zero value otherwise.
func (o *Association) GetRelatedName() string {
	if o == nil || IsNil(o.RelatedName) {
		var ret string
		return ret
	}
	return *o.RelatedName
}

// GetRelatedNameOk returns a tuple with the RelatedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Association) GetRelatedNameOk() (*string, bool) {
	if o == nil || IsNil(o.RelatedName) {
		return nil, false
	}
	return o.RelatedName, true
}

// HasRelatedName returns a boolean if a field has been set.
func (o *Association) HasRelatedName() bool {
	if o != nil && !IsNil(o.RelatedName) {
		return true
	}

	return false
}

// SetRelatedName gets a reference to the given string and assigns it to the RelatedName field.
func (o *Association) SetRelatedName(v string) {
	o.RelatedName = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Association) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Association) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Association) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Association) SetSource(v string) {
	o.Source = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *Association) GetHighlight() string {
	if o == nil || IsNil(o.Highlight) {
		var ret string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Association) GetHighlightOk() (*string, bool) {
	if o == nil || IsNil(o.Highlight) {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *Association) HasHighlight() bool {
	if o != nil && !IsNil(o.Highlight) {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given string and assigns it to the Highlight field.
func (o *Association) SetHighlight(v string) {
	o.Highlight = &v
}

// GetQualifiers returns the Qualifiers field value if set, zero value otherwise.
func (o *Association) GetQualifiers() []Qualifier {
	if o == nil || IsNil(o.Qualifiers) {
		var ret []Qualifier
		return ret
	}
	return o.Qualifiers
}

// GetQualifiersOk returns a tuple with the Qualifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Association) GetQualifiersOk() ([]Qualifier, bool) {
	if o == nil || IsNil(o.Qualifiers) {
		return nil, false
	}
	return o.Qualifiers, true
}

// HasQualifiers returns a boolean if a field has been set.
func (o *Association) HasQualifiers() bool {
	if o != nil && !IsNil(o.Qualifiers) {
		return true
	}

	return false
}

// SetQualifiers gets a reference to the given []Qualifier and assigns it to the Qualifiers field.
func (o *Association) SetQualifiers(v []Qualifier) {
	o.Qualifiers = v
}

func (o Association) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Association) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Ct) {
		toSerialize["ct"] = o.Ct
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RelatedCode) {
		toSerialize["relatedCode"] = o.RelatedCode
	}
	if !IsNil(o.RelatedName) {
		toSerialize["relatedName"] = o.RelatedName
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Highlight) {
		toSerialize["highlight"] = o.Highlight
	}
	if !IsNil(o.Qualifiers) {
		toSerialize["qualifiers"] = o.Qualifiers
	}
	return toSerialize, nil
}

type NullableAssociation struct {
	value *Association
	isSet bool
}

func (v NullableAssociation) Get() *Association {
	return v.value
}

func (v *NullableAssociation) Set(val *Association) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociation(val *Association) *NullableAssociation {
	return &NullableAssociation{value: val, isSet: true}
}

func (v NullableAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


