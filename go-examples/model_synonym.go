/*
NCI EVS Rest API

Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>

API version: 1.7.2.RELEASE
Contact: NCIAppSupport@nih.gov
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evs

import (
	"encoding/json"
)

// checks if the Synonym type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Synonym{}

// Synonym Represents one of the (potentially many) names for a concept
type Synonym struct {
	// URI for this element in an rdf-based source file
	Uri *string `json:"uri,omitempty"`
	// Used to indicate the total amount of data in cases where a limit is being applied
	Ct *int32 `json:"ct,omitempty"`
	// Name for a concept
	Name *string `json:"name,omitempty"`
	// Used by search calls to provide information for highlighting a view of results
	Highlight *string `json:"highlight,omitempty"`
	// Synonym term type
	TermType *string `json:"termType,omitempty"`
	// Synonym type
	Type *string `json:"type,omitempty"`
	// Synonym source
	Source *string `json:"source,omitempty"`
	// Code of the synonym, used in particular for Metathesaurus data where the source of the synonym is not the terminology itself
	Code *string `json:"code,omitempty"`
	// Synonym sub-source
	SubSource *string `json:"subSource,omitempty"`
	// Type/value qualifiers on the synonym
	Qualifiers []Qualifier `json:"qualifiers,omitempty"`
	// Indicates whether the synonym is active
	Active *bool `json:"active,omitempty"`
}

// NewSynonym instantiates a new Synonym object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSynonym() *Synonym {
	this := Synonym{}
	return &this
}

// NewSynonymWithDefaults instantiates a new Synonym object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSynonymWithDefaults() *Synonym {
	this := Synonym{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *Synonym) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Synonym) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *Synonym) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *Synonym) SetUri(v string) {
	o.Uri = &v
}

// GetCt returns the Ct field value if set, zero value otherwise.
func (o *Synonym) GetCt() int32 {
	if o == nil || IsNil(o.Ct) {
		var ret int32
		return ret
	}
	return *o.Ct
}

// GetCtOk returns a tuple with the Ct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Synonym) GetCtOk() (*int32, bool) {
	if o == nil || IsNil(o.Ct) {
		return nil, false
	}
	return o.Ct, true
}

// HasCt returns a boolean if a field has been set.
func (o *Synonym) HasCt() bool {
	if o != nil && !IsNil(o.Ct) {
		return true
	}

	return false
}

// SetCt gets a reference to the given int32 and assigns it to the Ct field.
func (o *Synonym) SetCt(v int32) {
	o.Ct = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Synonym) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Synonym) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Synonym) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Synonym) SetName(v string) {
	o.Name = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *Synonym) GetHighlight() string {
	if o == nil || IsNil(o.Highlight) {
		var ret string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Synonym) GetHighlightOk() (*string, bool) {
	if o == nil || IsNil(o.Highlight) {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *Synonym) HasHighlight() bool {
	if o != nil && !IsNil(o.Highlight) {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given string and assigns it to the Highlight field.
func (o *Synonym) SetHighlight(v string) {
	o.Highlight = &v
}

// GetTermType returns the TermType field value if set, zero value otherwise.
func (o *Synonym) GetTermType() string {
	if o == nil || IsNil(o.TermType) {
		var ret string
		return ret
	}
	return *o.TermType
}

// GetTermTypeOk returns a tuple with the TermType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Synonym) GetTermTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TermType) {
		return nil, false
	}
	return o.TermType, true
}

// HasTermType returns a boolean if a field has been set.
func (o *Synonym) HasTermType() bool {
	if o != nil && !IsNil(o.TermType) {
		return true
	}

	return false
}

// SetTermType gets a reference to the given string and assigns it to the TermType field.
func (o *Synonym) SetTermType(v string) {
	o.TermType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Synonym) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Synonym) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Synonym) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Synonym) SetType(v string) {
	o.Type = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Synonym) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Synonym) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Synonym) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Synonym) SetSource(v string) {
	o.Source = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Synonym) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Synonym) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Synonym) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Synonym) SetCode(v string) {
	o.Code = &v
}

// GetSubSource returns the SubSource field value if set, zero value otherwise.
func (o *Synonym) GetSubSource() string {
	if o == nil || IsNil(o.SubSource) {
		var ret string
		return ret
	}
	return *o.SubSource
}

// GetSubSourceOk returns a tuple with the SubSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Synonym) GetSubSourceOk() (*string, bool) {
	if o == nil || IsNil(o.SubSource) {
		return nil, false
	}
	return o.SubSource, true
}

// HasSubSource returns a boolean if a field has been set.
func (o *Synonym) HasSubSource() bool {
	if o != nil && !IsNil(o.SubSource) {
		return true
	}

	return false
}

// SetSubSource gets a reference to the given string and assigns it to the SubSource field.
func (o *Synonym) SetSubSource(v string) {
	o.SubSource = &v
}

// GetQualifiers returns the Qualifiers field value if set, zero value otherwise.
func (o *Synonym) GetQualifiers() []Qualifier {
	if o == nil || IsNil(o.Qualifiers) {
		var ret []Qualifier
		return ret
	}
	return o.Qualifiers
}

// GetQualifiersOk returns a tuple with the Qualifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Synonym) GetQualifiersOk() ([]Qualifier, bool) {
	if o == nil || IsNil(o.Qualifiers) {
		return nil, false
	}
	return o.Qualifiers, true
}

// HasQualifiers returns a boolean if a field has been set.
func (o *Synonym) HasQualifiers() bool {
	if o != nil && !IsNil(o.Qualifiers) {
		return true
	}

	return false
}

// SetQualifiers gets a reference to the given []Qualifier and assigns it to the Qualifiers field.
func (o *Synonym) SetQualifiers(v []Qualifier) {
	o.Qualifiers = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Synonym) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Synonym) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Synonym) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Synonym) SetActive(v bool) {
	o.Active = &v
}

func (o Synonym) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Synonym) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Ct) {
		toSerialize["ct"] = o.Ct
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Highlight) {
		toSerialize["highlight"] = o.Highlight
	}
	if !IsNil(o.TermType) {
		toSerialize["termType"] = o.TermType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.SubSource) {
		toSerialize["subSource"] = o.SubSource
	}
	if !IsNil(o.Qualifiers) {
		toSerialize["qualifiers"] = o.Qualifiers
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableSynonym struct {
	value *Synonym
	isSet bool
}

func (v NullableSynonym) Get() *Synonym {
	return v.value
}

func (v *NullableSynonym) Set(val *Synonym) {
	v.value = val
	v.isSet = true
}

func (v NullableSynonym) IsSet() bool {
	return v.isSet
}

func (v *NullableSynonym) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSynonym(val *Synonym) *NullableSynonym {
	return &NullableSynonym{value: val, isSet: true}
}

func (v NullableSynonym) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSynonym) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


