/*
NCI EVS Rest API

Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>

API version: 1.7.2.RELEASE
Contact: NCIAppSupport@nih.gov
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evs

import (
	"encoding/json"
)

// checks if the Concept type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Concept{}

// Concept Represents a concept in a terminology
type Concept struct {
	// URI for this element in an rdf-based source file
	Uri *string `json:"uri,omitempty"`
	// Used to indicate the total amount of data in cases where a limit is being applied
	Ct *int32 `json:"ct,omitempty"`
	// Code (unique identifier) for this meaning
	Code *string `json:"code,omitempty"`
	// Preferred name for the code
	Name *string `json:"name,omitempty"`
	// Terminology abbreviation, e.g. 'nci'
	Terminology *string `json:"terminology,omitempty"`
	// Terminology version, e.g. '23.11d'
	Version *string `json:"version,omitempty"`
	// Level of depth in a hierarchy (when this object is used to represent an element in a path)
	Level *int32 `json:"level,omitempty"`
	// Used by search calls to provide information for highlighting a view of results
	Highlight *string `json:"highlight,omitempty"`
	// Link to download data for a subset, used when the concept represents subset metadata
	SubsetLink *string `json:"subsetLink,omitempty"`
	// Metadata for downloading a mapset
	MapsetLink *string `json:"mapsetLink,omitempty"`
	// Status value for the concept, e.g. Retired_Concept
	ConceptStatus *string `json:"conceptStatus,omitempty"`
	// Associations from this concept to other ones
	Source *string `json:"source,omitempty"`
	// Indicates whether concept is a leaf node
	Leaf *bool `json:"leaf,omitempty"`
	// Indicates whether the concept is active
	Active *bool `json:"active,omitempty"`
	// Synonyms, or all of the names for this concept, including the preferred name
	Synonyms []Synonym `json:"synonyms,omitempty"`
	// Text definitions
	Definitions []Definition `json:"definitions,omitempty"`
	// Key/value properties
	Properties []Property `json:"properties,omitempty"`
	// Child concepts in the hierarchy
	Children []Concept `json:"children,omitempty"`
	// Parent concepts in the hierarchy
	Parents []Concept `json:"parents,omitempty"`
	// Descendant concepts in the hierarchy
	Descendants []Concept `json:"descendants,omitempty"`
	// Qualifiers for use when a concept is used as a parent/child - to indicate RELA for NCIm-derived content
	Qualifiers []Qualifier `json:"qualifiers,omitempty"`
	// Associations from this concept to other ones
	Associations []Association `json:"associations,omitempty"`
	// Associations to this concept from other ones
	InverseAssociations []Association `json:"inverseAssociations,omitempty"`
	// Roles from this concept to other ones
	Roles []Role `json:"roles,omitempty"`
	// Assertions of disjointness with respect to other concepts
	DisjointWith []DisjointWith `json:"disjointWith,omitempty"`
	// Roles to this concept from other ones
	InverseRoles []Role `json:"inverseRoles,omitempty"`
	// History records
	History []History `json:"history,omitempty"`
	// Maps from this concept to concepts in other terminologies
	Maps []ConceptMap `json:"maps,omitempty"`
	Paths *Paths `json:"paths,omitempty"`
}

// NewConcept instantiates a new Concept object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConcept() *Concept {
	this := Concept{}
	return &this
}

// NewConceptWithDefaults instantiates a new Concept object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConceptWithDefaults() *Concept {
	this := Concept{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *Concept) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *Concept) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *Concept) SetUri(v string) {
	o.Uri = &v
}

// GetCt returns the Ct field value if set, zero value otherwise.
func (o *Concept) GetCt() int32 {
	if o == nil || IsNil(o.Ct) {
		var ret int32
		return ret
	}
	return *o.Ct
}

// GetCtOk returns a tuple with the Ct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetCtOk() (*int32, bool) {
	if o == nil || IsNil(o.Ct) {
		return nil, false
	}
	return o.Ct, true
}

// HasCt returns a boolean if a field has been set.
func (o *Concept) HasCt() bool {
	if o != nil && !IsNil(o.Ct) {
		return true
	}

	return false
}

// SetCt gets a reference to the given int32 and assigns it to the Ct field.
func (o *Concept) SetCt(v int32) {
	o.Ct = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Concept) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Concept) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Concept) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Concept) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Concept) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Concept) SetName(v string) {
	o.Name = &v
}

// GetTerminology returns the Terminology field value if set, zero value otherwise.
func (o *Concept) GetTerminology() string {
	if o == nil || IsNil(o.Terminology) {
		var ret string
		return ret
	}
	return *o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetTerminologyOk() (*string, bool) {
	if o == nil || IsNil(o.Terminology) {
		return nil, false
	}
	return o.Terminology, true
}

// HasTerminology returns a boolean if a field has been set.
func (o *Concept) HasTerminology() bool {
	if o != nil && !IsNil(o.Terminology) {
		return true
	}

	return false
}

// SetTerminology gets a reference to the given string and assigns it to the Terminology field.
func (o *Concept) SetTerminology(v string) {
	o.Terminology = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Concept) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Concept) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Concept) SetVersion(v string) {
	o.Version = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *Concept) GetLevel() int32 {
	if o == nil || IsNil(o.Level) {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *Concept) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *Concept) SetLevel(v int32) {
	o.Level = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *Concept) GetHighlight() string {
	if o == nil || IsNil(o.Highlight) {
		var ret string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetHighlightOk() (*string, bool) {
	if o == nil || IsNil(o.Highlight) {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *Concept) HasHighlight() bool {
	if o != nil && !IsNil(o.Highlight) {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given string and assigns it to the Highlight field.
func (o *Concept) SetHighlight(v string) {
	o.Highlight = &v
}

// GetSubsetLink returns the SubsetLink field value if set, zero value otherwise.
func (o *Concept) GetSubsetLink() string {
	if o == nil || IsNil(o.SubsetLink) {
		var ret string
		return ret
	}
	return *o.SubsetLink
}

// GetSubsetLinkOk returns a tuple with the SubsetLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetSubsetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.SubsetLink) {
		return nil, false
	}
	return o.SubsetLink, true
}

// HasSubsetLink returns a boolean if a field has been set.
func (o *Concept) HasSubsetLink() bool {
	if o != nil && !IsNil(o.SubsetLink) {
		return true
	}

	return false
}

// SetSubsetLink gets a reference to the given string and assigns it to the SubsetLink field.
func (o *Concept) SetSubsetLink(v string) {
	o.SubsetLink = &v
}

// GetMapsetLink returns the MapsetLink field value if set, zero value otherwise.
func (o *Concept) GetMapsetLink() string {
	if o == nil || IsNil(o.MapsetLink) {
		var ret string
		return ret
	}
	return *o.MapsetLink
}

// GetMapsetLinkOk returns a tuple with the MapsetLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetMapsetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.MapsetLink) {
		return nil, false
	}
	return o.MapsetLink, true
}

// HasMapsetLink returns a boolean if a field has been set.
func (o *Concept) HasMapsetLink() bool {
	if o != nil && !IsNil(o.MapsetLink) {
		return true
	}

	return false
}

// SetMapsetLink gets a reference to the given string and assigns it to the MapsetLink field.
func (o *Concept) SetMapsetLink(v string) {
	o.MapsetLink = &v
}

// GetConceptStatus returns the ConceptStatus field value if set, zero value otherwise.
func (o *Concept) GetConceptStatus() string {
	if o == nil || IsNil(o.ConceptStatus) {
		var ret string
		return ret
	}
	return *o.ConceptStatus
}

// GetConceptStatusOk returns a tuple with the ConceptStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetConceptStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ConceptStatus) {
		return nil, false
	}
	return o.ConceptStatus, true
}

// HasConceptStatus returns a boolean if a field has been set.
func (o *Concept) HasConceptStatus() bool {
	if o != nil && !IsNil(o.ConceptStatus) {
		return true
	}

	return false
}

// SetConceptStatus gets a reference to the given string and assigns it to the ConceptStatus field.
func (o *Concept) SetConceptStatus(v string) {
	o.ConceptStatus = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Concept) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Concept) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Concept) SetSource(v string) {
	o.Source = &v
}

// GetLeaf returns the Leaf field value if set, zero value otherwise.
func (o *Concept) GetLeaf() bool {
	if o == nil || IsNil(o.Leaf) {
		var ret bool
		return ret
	}
	return *o.Leaf
}

// GetLeafOk returns a tuple with the Leaf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetLeafOk() (*bool, bool) {
	if o == nil || IsNil(o.Leaf) {
		return nil, false
	}
	return o.Leaf, true
}

// HasLeaf returns a boolean if a field has been set.
func (o *Concept) HasLeaf() bool {
	if o != nil && !IsNil(o.Leaf) {
		return true
	}

	return false
}

// SetLeaf gets a reference to the given bool and assigns it to the Leaf field.
func (o *Concept) SetLeaf(v bool) {
	o.Leaf = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Concept) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Concept) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Concept) SetActive(v bool) {
	o.Active = &v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *Concept) GetSynonyms() []Synonym {
	if o == nil || IsNil(o.Synonyms) {
		var ret []Synonym
		return ret
	}
	return o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetSynonymsOk() ([]Synonym, bool) {
	if o == nil || IsNil(o.Synonyms) {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *Concept) HasSynonyms() bool {
	if o != nil && !IsNil(o.Synonyms) {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given []Synonym and assigns it to the Synonyms field.
func (o *Concept) SetSynonyms(v []Synonym) {
	o.Synonyms = v
}

// GetDefinitions returns the Definitions field value if set, zero value otherwise.
func (o *Concept) GetDefinitions() []Definition {
	if o == nil || IsNil(o.Definitions) {
		var ret []Definition
		return ret
	}
	return o.Definitions
}

// GetDefinitionsOk returns a tuple with the Definitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetDefinitionsOk() ([]Definition, bool) {
	if o == nil || IsNil(o.Definitions) {
		return nil, false
	}
	return o.Definitions, true
}

// HasDefinitions returns a boolean if a field has been set.
func (o *Concept) HasDefinitions() bool {
	if o != nil && !IsNil(o.Definitions) {
		return true
	}

	return false
}

// SetDefinitions gets a reference to the given []Definition and assigns it to the Definitions field.
func (o *Concept) SetDefinitions(v []Definition) {
	o.Definitions = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Concept) GetProperties() []Property {
	if o == nil || IsNil(o.Properties) {
		var ret []Property
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetPropertiesOk() ([]Property, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Concept) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []Property and assigns it to the Properties field.
func (o *Concept) SetProperties(v []Property) {
	o.Properties = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *Concept) GetChildren() []Concept {
	if o == nil || IsNil(o.Children) {
		var ret []Concept
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetChildrenOk() ([]Concept, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Concept) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []Concept and assigns it to the Children field.
func (o *Concept) SetChildren(v []Concept) {
	o.Children = v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *Concept) GetParents() []Concept {
	if o == nil || IsNil(o.Parents) {
		var ret []Concept
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetParentsOk() ([]Concept, bool) {
	if o == nil || IsNil(o.Parents) {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *Concept) HasParents() bool {
	if o != nil && !IsNil(o.Parents) {
		return true
	}

	return false
}

// SetParents gets a reference to the given []Concept and assigns it to the Parents field.
func (o *Concept) SetParents(v []Concept) {
	o.Parents = v
}

// GetDescendants returns the Descendants field value if set, zero value otherwise.
func (o *Concept) GetDescendants() []Concept {
	if o == nil || IsNil(o.Descendants) {
		var ret []Concept
		return ret
	}
	return o.Descendants
}

// GetDescendantsOk returns a tuple with the Descendants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetDescendantsOk() ([]Concept, bool) {
	if o == nil || IsNil(o.Descendants) {
		return nil, false
	}
	return o.Descendants, true
}

// HasDescendants returns a boolean if a field has been set.
func (o *Concept) HasDescendants() bool {
	if o != nil && !IsNil(o.Descendants) {
		return true
	}

	return false
}

// SetDescendants gets a reference to the given []Concept and assigns it to the Descendants field.
func (o *Concept) SetDescendants(v []Concept) {
	o.Descendants = v
}

// GetQualifiers returns the Qualifiers field value if set, zero value otherwise.
func (o *Concept) GetQualifiers() []Qualifier {
	if o == nil || IsNil(o.Qualifiers) {
		var ret []Qualifier
		return ret
	}
	return o.Qualifiers
}

// GetQualifiersOk returns a tuple with the Qualifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetQualifiersOk() ([]Qualifier, bool) {
	if o == nil || IsNil(o.Qualifiers) {
		return nil, false
	}
	return o.Qualifiers, true
}

// HasQualifiers returns a boolean if a field has been set.
func (o *Concept) HasQualifiers() bool {
	if o != nil && !IsNil(o.Qualifiers) {
		return true
	}

	return false
}

// SetQualifiers gets a reference to the given []Qualifier and assigns it to the Qualifiers field.
func (o *Concept) SetQualifiers(v []Qualifier) {
	o.Qualifiers = v
}

// GetAssociations returns the Associations field value if set, zero value otherwise.
func (o *Concept) GetAssociations() []Association {
	if o == nil || IsNil(o.Associations) {
		var ret []Association
		return ret
	}
	return o.Associations
}

// GetAssociationsOk returns a tuple with the Associations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetAssociationsOk() ([]Association, bool) {
	if o == nil || IsNil(o.Associations) {
		return nil, false
	}
	return o.Associations, true
}

// HasAssociations returns a boolean if a field has been set.
func (o *Concept) HasAssociations() bool {
	if o != nil && !IsNil(o.Associations) {
		return true
	}

	return false
}

// SetAssociations gets a reference to the given []Association and assigns it to the Associations field.
func (o *Concept) SetAssociations(v []Association) {
	o.Associations = v
}

// GetInverseAssociations returns the InverseAssociations field value if set, zero value otherwise.
func (o *Concept) GetInverseAssociations() []Association {
	if o == nil || IsNil(o.InverseAssociations) {
		var ret []Association
		return ret
	}
	return o.InverseAssociations
}

// GetInverseAssociationsOk returns a tuple with the InverseAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetInverseAssociationsOk() ([]Association, bool) {
	if o == nil || IsNil(o.InverseAssociations) {
		return nil, false
	}
	return o.InverseAssociations, true
}

// HasInverseAssociations returns a boolean if a field has been set.
func (o *Concept) HasInverseAssociations() bool {
	if o != nil && !IsNil(o.InverseAssociations) {
		return true
	}

	return false
}

// SetInverseAssociations gets a reference to the given []Association and assigns it to the InverseAssociations field.
func (o *Concept) SetInverseAssociations(v []Association) {
	o.InverseAssociations = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Concept) GetRoles() []Role {
	if o == nil || IsNil(o.Roles) {
		var ret []Role
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetRolesOk() ([]Role, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Concept) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []Role and assigns it to the Roles field.
func (o *Concept) SetRoles(v []Role) {
	o.Roles = v
}

// GetDisjointWith returns the DisjointWith field value if set, zero value otherwise.
func (o *Concept) GetDisjointWith() []DisjointWith {
	if o == nil || IsNil(o.DisjointWith) {
		var ret []DisjointWith
		return ret
	}
	return o.DisjointWith
}

// GetDisjointWithOk returns a tuple with the DisjointWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetDisjointWithOk() ([]DisjointWith, bool) {
	if o == nil || IsNil(o.DisjointWith) {
		return nil, false
	}
	return o.DisjointWith, true
}

// HasDisjointWith returns a boolean if a field has been set.
func (o *Concept) HasDisjointWith() bool {
	if o != nil && !IsNil(o.DisjointWith) {
		return true
	}

	return false
}

// SetDisjointWith gets a reference to the given []DisjointWith and assigns it to the DisjointWith field.
func (o *Concept) SetDisjointWith(v []DisjointWith) {
	o.DisjointWith = v
}

// GetInverseRoles returns the InverseRoles field value if set, zero value otherwise.
func (o *Concept) GetInverseRoles() []Role {
	if o == nil || IsNil(o.InverseRoles) {
		var ret []Role
		return ret
	}
	return o.InverseRoles
}

// GetInverseRolesOk returns a tuple with the InverseRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetInverseRolesOk() ([]Role, bool) {
	if o == nil || IsNil(o.InverseRoles) {
		return nil, false
	}
	return o.InverseRoles, true
}

// HasInverseRoles returns a boolean if a field has been set.
func (o *Concept) HasInverseRoles() bool {
	if o != nil && !IsNil(o.InverseRoles) {
		return true
	}

	return false
}

// SetInverseRoles gets a reference to the given []Role and assigns it to the InverseRoles field.
func (o *Concept) SetInverseRoles(v []Role) {
	o.InverseRoles = v
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *Concept) GetHistory() []History {
	if o == nil || IsNil(o.History) {
		var ret []History
		return ret
	}
	return o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetHistoryOk() ([]History, bool) {
	if o == nil || IsNil(o.History) {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *Concept) HasHistory() bool {
	if o != nil && !IsNil(o.History) {
		return true
	}

	return false
}

// SetHistory gets a reference to the given []History and assigns it to the History field.
func (o *Concept) SetHistory(v []History) {
	o.History = v
}

// GetMaps returns the Maps field value if set, zero value otherwise.
func (o *Concept) GetMaps() []ConceptMap {
	if o == nil || IsNil(o.Maps) {
		var ret []ConceptMap
		return ret
	}
	return o.Maps
}

// GetMapsOk returns a tuple with the Maps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetMapsOk() ([]ConceptMap, bool) {
	if o == nil || IsNil(o.Maps) {
		return nil, false
	}
	return o.Maps, true
}

// HasMaps returns a boolean if a field has been set.
func (o *Concept) HasMaps() bool {
	if o != nil && !IsNil(o.Maps) {
		return true
	}

	return false
}

// SetMaps gets a reference to the given []ConceptMap and assigns it to the Maps field.
func (o *Concept) SetMaps(v []ConceptMap) {
	o.Maps = v
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *Concept) GetPaths() Paths {
	if o == nil || IsNil(o.Paths) {
		var ret Paths
		return ret
	}
	return *o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetPathsOk() (*Paths, bool) {
	if o == nil || IsNil(o.Paths) {
		return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *Concept) HasPaths() bool {
	if o != nil && !IsNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given Paths and assigns it to the Paths field.
func (o *Concept) SetPaths(v Paths) {
	o.Paths = &v
}

func (o Concept) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Concept) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Ct) {
		toSerialize["ct"] = o.Ct
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Terminology) {
		toSerialize["terminology"] = o.Terminology
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Highlight) {
		toSerialize["highlight"] = o.Highlight
	}
	if !IsNil(o.SubsetLink) {
		toSerialize["subsetLink"] = o.SubsetLink
	}
	if !IsNil(o.MapsetLink) {
		toSerialize["mapsetLink"] = o.MapsetLink
	}
	if !IsNil(o.ConceptStatus) {
		toSerialize["conceptStatus"] = o.ConceptStatus
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Leaf) {
		toSerialize["leaf"] = o.Leaf
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Synonyms) {
		toSerialize["synonyms"] = o.Synonyms
	}
	if !IsNil(o.Definitions) {
		toSerialize["definitions"] = o.Definitions
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.Parents) {
		toSerialize["parents"] = o.Parents
	}
	if !IsNil(o.Descendants) {
		toSerialize["descendants"] = o.Descendants
	}
	if !IsNil(o.Qualifiers) {
		toSerialize["qualifiers"] = o.Qualifiers
	}
	if !IsNil(o.Associations) {
		toSerialize["associations"] = o.Associations
	}
	if !IsNil(o.InverseAssociations) {
		toSerialize["inverseAssociations"] = o.InverseAssociations
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.DisjointWith) {
		toSerialize["disjointWith"] = o.DisjointWith
	}
	if !IsNil(o.InverseRoles) {
		toSerialize["inverseRoles"] = o.InverseRoles
	}
	if !IsNil(o.History) {
		toSerialize["history"] = o.History
	}
	if !IsNil(o.Maps) {
		toSerialize["maps"] = o.Maps
	}
	if !IsNil(o.Paths) {
		toSerialize["paths"] = o.Paths
	}
	return toSerialize, nil
}

type NullableConcept struct {
	value *Concept
	isSet bool
}

func (v NullableConcept) Get() *Concept {
	return v.value
}

func (v *NullableConcept) Set(val *Concept) {
	v.value = val
	v.isSet = true
}

func (v NullableConcept) IsSet() bool {
	return v.isSet
}

func (v *NullableConcept) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConcept(val *Concept) *NullableConcept {
	return &NullableConcept{value: val, isSet: true}
}

func (v NullableConcept) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConcept) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


