/*
NCI EVS Rest API

Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>

API version: 1.7.2.RELEASE
Contact: NCIAppSupport@nih.gov
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evs

import (
	"encoding/json"
)

// checks if the ConceptMinimal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConceptMinimal{}

// ConceptMinimal Represents minimal information about a concept in a terminology
type ConceptMinimal struct {
	// URI for this element in an rdf-based source file
	Uri *string `json:"uri,omitempty"`
	// Used to indicate the total amount of data in cases where a limit is being applied
	Ct *int32 `json:"ct,omitempty"`
	// Code (unique identifier) for this meaning
	Code *string `json:"code,omitempty"`
	// Preferred name for the code
	Name *string `json:"name,omitempty"`
	// Terminology abbreviation, e.g. 'nci'
	Terminology *string `json:"terminology,omitempty"`
	// Terminology version, e.g. '23.11d'
	Version *string `json:"version,omitempty"`
	// Level of depth in a hierarchy (when this object is used to represent an element in a path)
	Level *int32 `json:"level,omitempty"`
}

// NewConceptMinimal instantiates a new ConceptMinimal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConceptMinimal() *ConceptMinimal {
	this := ConceptMinimal{}
	return &this
}

// NewConceptMinimalWithDefaults instantiates a new ConceptMinimal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConceptMinimalWithDefaults() *ConceptMinimal {
	this := ConceptMinimal{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ConceptMinimal) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMinimal) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ConceptMinimal) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ConceptMinimal) SetUri(v string) {
	o.Uri = &v
}

// GetCt returns the Ct field value if set, zero value otherwise.
func (o *ConceptMinimal) GetCt() int32 {
	if o == nil || IsNil(o.Ct) {
		var ret int32
		return ret
	}
	return *o.Ct
}

// GetCtOk returns a tuple with the Ct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMinimal) GetCtOk() (*int32, bool) {
	if o == nil || IsNil(o.Ct) {
		return nil, false
	}
	return o.Ct, true
}

// HasCt returns a boolean if a field has been set.
func (o *ConceptMinimal) HasCt() bool {
	if o != nil && !IsNil(o.Ct) {
		return true
	}

	return false
}

// SetCt gets a reference to the given int32 and assigns it to the Ct field.
func (o *ConceptMinimal) SetCt(v int32) {
	o.Ct = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ConceptMinimal) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMinimal) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ConceptMinimal) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ConceptMinimal) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConceptMinimal) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMinimal) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConceptMinimal) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConceptMinimal) SetName(v string) {
	o.Name = &v
}

// GetTerminology returns the Terminology field value if set, zero value otherwise.
func (o *ConceptMinimal) GetTerminology() string {
	if o == nil || IsNil(o.Terminology) {
		var ret string
		return ret
	}
	return *o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMinimal) GetTerminologyOk() (*string, bool) {
	if o == nil || IsNil(o.Terminology) {
		return nil, false
	}
	return o.Terminology, true
}

// HasTerminology returns a boolean if a field has been set.
func (o *ConceptMinimal) HasTerminology() bool {
	if o != nil && !IsNil(o.Terminology) {
		return true
	}

	return false
}

// SetTerminology gets a reference to the given string and assigns it to the Terminology field.
func (o *ConceptMinimal) SetTerminology(v string) {
	o.Terminology = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ConceptMinimal) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMinimal) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ConceptMinimal) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ConceptMinimal) SetVersion(v string) {
	o.Version = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *ConceptMinimal) GetLevel() int32 {
	if o == nil || IsNil(o.Level) {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMinimal) GetLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *ConceptMinimal) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *ConceptMinimal) SetLevel(v int32) {
	o.Level = &v
}

func (o ConceptMinimal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConceptMinimal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Ct) {
		toSerialize["ct"] = o.Ct
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Terminology) {
		toSerialize["terminology"] = o.Terminology
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	return toSerialize, nil
}

type NullableConceptMinimal struct {
	value *ConceptMinimal
	isSet bool
}

func (v NullableConceptMinimal) Get() *ConceptMinimal {
	return v.value
}

func (v *NullableConceptMinimal) Set(val *ConceptMinimal) {
	v.value = val
	v.isSet = true
}

func (v NullableConceptMinimal) IsSet() bool {
	return v.isSet
}

func (v *NullableConceptMinimal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConceptMinimal(val *ConceptMinimal) *NullableConceptMinimal {
	return &NullableConceptMinimal{value: val, isSet: true}
}

func (v NullableConceptMinimal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConceptMinimal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


