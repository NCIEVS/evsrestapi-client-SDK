/*
NCI EVS Rest API

Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>

API version: 1.7.2.RELEASE
Contact: NCIAppSupport@nih.gov
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evs

import (
	"encoding/json"
)

// checks if the SearchCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCriteria{}

// SearchCriteria Criteria for a search or find operation
type SearchCriteria struct {
	// URI for this element in an rdf-based source file
	Uri *string `json:"uri,omitempty"`
	// Used to indicate the total amount of data in cases where a limit is being applied
	Ct *int32 `json:"ct,omitempty"`
	// Search term, e.g. 'heart', or 'C3224'
	Term *string `json:"term,omitempty"`
	// The match type, one of: contains, match, startsWith, phrase, AND, OR, fuzzy
	Type *string `json:"type,omitempty"`
	// Include parameter value, e.g. 'minimal', 'summary', 'synonyms,properties,children'
	Include *string `json:"include,omitempty"`
	// Sort field
	Sort *string `json:"sort,omitempty"`
	// Indicates whether sort is ascending (true), descending (false), or not specified (null)
	Ascending *bool `json:"ascending,omitempty"`
	// Start index of the search results
	FromRecord *int32 `json:"fromRecord,omitempty"`
	// Max number of results to return
	PageSize *int32 `json:"pageSize,omitempty"`
	// Comma-separated list of concept status values to restrict search results by
	ConceptStatus []string `json:"conceptStatus,omitempty"`
	// Comma-separated list of properties to restrict search results by
	Property []string `json:"property,omitempty"`
	// A property value to restrict search results by
	Value *string `json:"value,omitempty"`
	// Comma-separated list of synonym sources to restrict search results by
	SynonymSource []string `json:"synonymSource,omitempty"`
	// Comma-separated list of synonym types to restrict search results by
	SynonymType []string `json:"synonymType,omitempty"`
	// Comma-separated list of definition sources to restrict search results by
	DefinitionSource []string `json:"definitionSource,omitempty"`
	// Comma-separated list of definition types to restrict search results by
	DefinitionType []string `json:"definitionType,omitempty"`
	// Comma-separated list of synonym term types to restrict search results by
	SynonymTermType []string `json:"synonymTermType,omitempty"`
	// Comma-separated list of subsets to restrict search results by, e.g. 'C157225'
	Subset []string `json:"subset,omitempty"`
	// Comma-separated list of concept codes to restrict search results by, e.g. 'C157225'
	CodeList []string `json:"codeList,omitempty"`
	// Comma-separated list of terminologies to search
	Terminology []string `json:"terminology,omitempty"`
	// SPARQL query, only available as an output parameter
	Sparql *string `json:"sparql,omitempty"`
}

// NewSearchCriteria instantiates a new SearchCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCriteria() *SearchCriteria {
	this := SearchCriteria{}
	return &this
}

// NewSearchCriteriaWithDefaults instantiates a new SearchCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCriteriaWithDefaults() *SearchCriteria {
	this := SearchCriteria{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *SearchCriteria) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *SearchCriteria) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *SearchCriteria) SetUri(v string) {
	o.Uri = &v
}

// GetCt returns the Ct field value if set, zero value otherwise.
func (o *SearchCriteria) GetCt() int32 {
	if o == nil || IsNil(o.Ct) {
		var ret int32
		return ret
	}
	return *o.Ct
}

// GetCtOk returns a tuple with the Ct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetCtOk() (*int32, bool) {
	if o == nil || IsNil(o.Ct) {
		return nil, false
	}
	return o.Ct, true
}

// HasCt returns a boolean if a field has been set.
func (o *SearchCriteria) HasCt() bool {
	if o != nil && !IsNil(o.Ct) {
		return true
	}

	return false
}

// SetCt gets a reference to the given int32 and assigns it to the Ct field.
func (o *SearchCriteria) SetCt(v int32) {
	o.Ct = &v
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *SearchCriteria) GetTerm() string {
	if o == nil || IsNil(o.Term) {
		var ret string
		return ret
	}
	return *o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetTermOk() (*string, bool) {
	if o == nil || IsNil(o.Term) {
		return nil, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *SearchCriteria) HasTerm() bool {
	if o != nil && !IsNil(o.Term) {
		return true
	}

	return false
}

// SetTerm gets a reference to the given string and assigns it to the Term field.
func (o *SearchCriteria) SetTerm(v string) {
	o.Term = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchCriteria) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchCriteria) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SearchCriteria) SetType(v string) {
	o.Type = &v
}

// GetInclude returns the Include field value if set, zero value otherwise.
func (o *SearchCriteria) GetInclude() string {
	if o == nil || IsNil(o.Include) {
		var ret string
		return ret
	}
	return *o.Include
}

// GetIncludeOk returns a tuple with the Include field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetIncludeOk() (*string, bool) {
	if o == nil || IsNil(o.Include) {
		return nil, false
	}
	return o.Include, true
}

// HasInclude returns a boolean if a field has been set.
func (o *SearchCriteria) HasInclude() bool {
	if o != nil && !IsNil(o.Include) {
		return true
	}

	return false
}

// SetInclude gets a reference to the given string and assigns it to the Include field.
func (o *SearchCriteria) SetInclude(v string) {
	o.Include = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *SearchCriteria) GetSort() string {
	if o == nil || IsNil(o.Sort) {
		var ret string
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetSortOk() (*string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *SearchCriteria) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given string and assigns it to the Sort field.
func (o *SearchCriteria) SetSort(v string) {
	o.Sort = &v
}

// GetAscending returns the Ascending field value if set, zero value otherwise.
func (o *SearchCriteria) GetAscending() bool {
	if o == nil || IsNil(o.Ascending) {
		var ret bool
		return ret
	}
	return *o.Ascending
}

// GetAscendingOk returns a tuple with the Ascending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetAscendingOk() (*bool, bool) {
	if o == nil || IsNil(o.Ascending) {
		return nil, false
	}
	return o.Ascending, true
}

// HasAscending returns a boolean if a field has been set.
func (o *SearchCriteria) HasAscending() bool {
	if o != nil && !IsNil(o.Ascending) {
		return true
	}

	return false
}

// SetAscending gets a reference to the given bool and assigns it to the Ascending field.
func (o *SearchCriteria) SetAscending(v bool) {
	o.Ascending = &v
}

// GetFromRecord returns the FromRecord field value if set, zero value otherwise.
func (o *SearchCriteria) GetFromRecord() int32 {
	if o == nil || IsNil(o.FromRecord) {
		var ret int32
		return ret
	}
	return *o.FromRecord
}

// GetFromRecordOk returns a tuple with the FromRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetFromRecordOk() (*int32, bool) {
	if o == nil || IsNil(o.FromRecord) {
		return nil, false
	}
	return o.FromRecord, true
}

// HasFromRecord returns a boolean if a field has been set.
func (o *SearchCriteria) HasFromRecord() bool {
	if o != nil && !IsNil(o.FromRecord) {
		return true
	}

	return false
}

// SetFromRecord gets a reference to the given int32 and assigns it to the FromRecord field.
func (o *SearchCriteria) SetFromRecord(v int32) {
	o.FromRecord = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *SearchCriteria) GetPageSize() int32 {
	if o == nil || IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetPageSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *SearchCriteria) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *SearchCriteria) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetConceptStatus returns the ConceptStatus field value if set, zero value otherwise.
func (o *SearchCriteria) GetConceptStatus() []string {
	if o == nil || IsNil(o.ConceptStatus) {
		var ret []string
		return ret
	}
	return o.ConceptStatus
}

// GetConceptStatusOk returns a tuple with the ConceptStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetConceptStatusOk() ([]string, bool) {
	if o == nil || IsNil(o.ConceptStatus) {
		return nil, false
	}
	return o.ConceptStatus, true
}

// HasConceptStatus returns a boolean if a field has been set.
func (o *SearchCriteria) HasConceptStatus() bool {
	if o != nil && !IsNil(o.ConceptStatus) {
		return true
	}

	return false
}

// SetConceptStatus gets a reference to the given []string and assigns it to the ConceptStatus field.
func (o *SearchCriteria) SetConceptStatus(v []string) {
	o.ConceptStatus = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *SearchCriteria) GetProperty() []string {
	if o == nil || IsNil(o.Property) {
		var ret []string
		return ret
	}
	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetPropertyOk() ([]string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *SearchCriteria) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given []string and assigns it to the Property field.
func (o *SearchCriteria) SetProperty(v []string) {
	o.Property = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SearchCriteria) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SearchCriteria) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SearchCriteria) SetValue(v string) {
	o.Value = &v
}

// GetSynonymSource returns the SynonymSource field value if set, zero value otherwise.
func (o *SearchCriteria) GetSynonymSource() []string {
	if o == nil || IsNil(o.SynonymSource) {
		var ret []string
		return ret
	}
	return o.SynonymSource
}

// GetSynonymSourceOk returns a tuple with the SynonymSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetSynonymSourceOk() ([]string, bool) {
	if o == nil || IsNil(o.SynonymSource) {
		return nil, false
	}
	return o.SynonymSource, true
}

// HasSynonymSource returns a boolean if a field has been set.
func (o *SearchCriteria) HasSynonymSource() bool {
	if o != nil && !IsNil(o.SynonymSource) {
		return true
	}

	return false
}

// SetSynonymSource gets a reference to the given []string and assigns it to the SynonymSource field.
func (o *SearchCriteria) SetSynonymSource(v []string) {
	o.SynonymSource = v
}

// GetSynonymType returns the SynonymType field value if set, zero value otherwise.
func (o *SearchCriteria) GetSynonymType() []string {
	if o == nil || IsNil(o.SynonymType) {
		var ret []string
		return ret
	}
	return o.SynonymType
}

// GetSynonymTypeOk returns a tuple with the SynonymType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetSynonymTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.SynonymType) {
		return nil, false
	}
	return o.SynonymType, true
}

// HasSynonymType returns a boolean if a field has been set.
func (o *SearchCriteria) HasSynonymType() bool {
	if o != nil && !IsNil(o.SynonymType) {
		return true
	}

	return false
}

// SetSynonymType gets a reference to the given []string and assigns it to the SynonymType field.
func (o *SearchCriteria) SetSynonymType(v []string) {
	o.SynonymType = v
}

// GetDefinitionSource returns the DefinitionSource field value if set, zero value otherwise.
func (o *SearchCriteria) GetDefinitionSource() []string {
	if o == nil || IsNil(o.DefinitionSource) {
		var ret []string
		return ret
	}
	return o.DefinitionSource
}

// GetDefinitionSourceOk returns a tuple with the DefinitionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetDefinitionSourceOk() ([]string, bool) {
	if o == nil || IsNil(o.DefinitionSource) {
		return nil, false
	}
	return o.DefinitionSource, true
}

// HasDefinitionSource returns a boolean if a field has been set.
func (o *SearchCriteria) HasDefinitionSource() bool {
	if o != nil && !IsNil(o.DefinitionSource) {
		return true
	}

	return false
}

// SetDefinitionSource gets a reference to the given []string and assigns it to the DefinitionSource field.
func (o *SearchCriteria) SetDefinitionSource(v []string) {
	o.DefinitionSource = v
}

// GetDefinitionType returns the DefinitionType field value if set, zero value otherwise.
func (o *SearchCriteria) GetDefinitionType() []string {
	if o == nil || IsNil(o.DefinitionType) {
		var ret []string
		return ret
	}
	return o.DefinitionType
}

// GetDefinitionTypeOk returns a tuple with the DefinitionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetDefinitionTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.DefinitionType) {
		return nil, false
	}
	return o.DefinitionType, true
}

// HasDefinitionType returns a boolean if a field has been set.
func (o *SearchCriteria) HasDefinitionType() bool {
	if o != nil && !IsNil(o.DefinitionType) {
		return true
	}

	return false
}

// SetDefinitionType gets a reference to the given []string and assigns it to the DefinitionType field.
func (o *SearchCriteria) SetDefinitionType(v []string) {
	o.DefinitionType = v
}

// GetSynonymTermType returns the SynonymTermType field value if set, zero value otherwise.
func (o *SearchCriteria) GetSynonymTermType() []string {
	if o == nil || IsNil(o.SynonymTermType) {
		var ret []string
		return ret
	}
	return o.SynonymTermType
}

// GetSynonymTermTypeOk returns a tuple with the SynonymTermType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetSynonymTermTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.SynonymTermType) {
		return nil, false
	}
	return o.SynonymTermType, true
}

// HasSynonymTermType returns a boolean if a field has been set.
func (o *SearchCriteria) HasSynonymTermType() bool {
	if o != nil && !IsNil(o.SynonymTermType) {
		return true
	}

	return false
}

// SetSynonymTermType gets a reference to the given []string and assigns it to the SynonymTermType field.
func (o *SearchCriteria) SetSynonymTermType(v []string) {
	o.SynonymTermType = v
}

// GetSubset returns the Subset field value if set, zero value otherwise.
func (o *SearchCriteria) GetSubset() []string {
	if o == nil || IsNil(o.Subset) {
		var ret []string
		return ret
	}
	return o.Subset
}

// GetSubsetOk returns a tuple with the Subset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetSubsetOk() ([]string, bool) {
	if o == nil || IsNil(o.Subset) {
		return nil, false
	}
	return o.Subset, true
}

// HasSubset returns a boolean if a field has been set.
func (o *SearchCriteria) HasSubset() bool {
	if o != nil && !IsNil(o.Subset) {
		return true
	}

	return false
}

// SetSubset gets a reference to the given []string and assigns it to the Subset field.
func (o *SearchCriteria) SetSubset(v []string) {
	o.Subset = v
}

// GetCodeList returns the CodeList field value if set, zero value otherwise.
func (o *SearchCriteria) GetCodeList() []string {
	if o == nil || IsNil(o.CodeList) {
		var ret []string
		return ret
	}
	return o.CodeList
}

// GetCodeListOk returns a tuple with the CodeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetCodeListOk() ([]string, bool) {
	if o == nil || IsNil(o.CodeList) {
		return nil, false
	}
	return o.CodeList, true
}

// HasCodeList returns a boolean if a field has been set.
func (o *SearchCriteria) HasCodeList() bool {
	if o != nil && !IsNil(o.CodeList) {
		return true
	}

	return false
}

// SetCodeList gets a reference to the given []string and assigns it to the CodeList field.
func (o *SearchCriteria) SetCodeList(v []string) {
	o.CodeList = v
}

// GetTerminology returns the Terminology field value if set, zero value otherwise.
func (o *SearchCriteria) GetTerminology() []string {
	if o == nil || IsNil(o.Terminology) {
		var ret []string
		return ret
	}
	return o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetTerminologyOk() ([]string, bool) {
	if o == nil || IsNil(o.Terminology) {
		return nil, false
	}
	return o.Terminology, true
}

// HasTerminology returns a boolean if a field has been set.
func (o *SearchCriteria) HasTerminology() bool {
	if o != nil && !IsNil(o.Terminology) {
		return true
	}

	return false
}

// SetTerminology gets a reference to the given []string and assigns it to the Terminology field.
func (o *SearchCriteria) SetTerminology(v []string) {
	o.Terminology = v
}

// GetSparql returns the Sparql field value if set, zero value otherwise.
func (o *SearchCriteria) GetSparql() string {
	if o == nil || IsNil(o.Sparql) {
		var ret string
		return ret
	}
	return *o.Sparql
}

// GetSparqlOk returns a tuple with the Sparql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetSparqlOk() (*string, bool) {
	if o == nil || IsNil(o.Sparql) {
		return nil, false
	}
	return o.Sparql, true
}

// HasSparql returns a boolean if a field has been set.
func (o *SearchCriteria) HasSparql() bool {
	if o != nil && !IsNil(o.Sparql) {
		return true
	}

	return false
}

// SetSparql gets a reference to the given string and assigns it to the Sparql field.
func (o *SearchCriteria) SetSparql(v string) {
	o.Sparql = &v
}

func (o SearchCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Ct) {
		toSerialize["ct"] = o.Ct
	}
	if !IsNil(o.Term) {
		toSerialize["term"] = o.Term
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Include) {
		toSerialize["include"] = o.Include
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.Ascending) {
		toSerialize["ascending"] = o.Ascending
	}
	if !IsNil(o.FromRecord) {
		toSerialize["fromRecord"] = o.FromRecord
	}
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}
	if !IsNil(o.ConceptStatus) {
		toSerialize["conceptStatus"] = o.ConceptStatus
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.SynonymSource) {
		toSerialize["synonymSource"] = o.SynonymSource
	}
	if !IsNil(o.SynonymType) {
		toSerialize["synonymType"] = o.SynonymType
	}
	if !IsNil(o.DefinitionSource) {
		toSerialize["definitionSource"] = o.DefinitionSource
	}
	if !IsNil(o.DefinitionType) {
		toSerialize["definitionType"] = o.DefinitionType
	}
	if !IsNil(o.SynonymTermType) {
		toSerialize["synonymTermType"] = o.SynonymTermType
	}
	if !IsNil(o.Subset) {
		toSerialize["subset"] = o.Subset
	}
	if !IsNil(o.CodeList) {
		toSerialize["codeList"] = o.CodeList
	}
	if !IsNil(o.Terminology) {
		toSerialize["terminology"] = o.Terminology
	}
	if !IsNil(o.Sparql) {
		toSerialize["sparql"] = o.Sparql
	}
	return toSerialize, nil
}

type NullableSearchCriteria struct {
	value *SearchCriteria
	isSet bool
}

func (v NullableSearchCriteria) Get() *SearchCriteria {
	return v.value
}

func (v *NullableSearchCriteria) Set(val *SearchCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCriteria(val *SearchCriteria) *NullableSearchCriteria {
	return &NullableSearchCriteria{value: val, isSet: true}
}

func (v NullableSearchCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


