/*
NCI EVS Rest API

Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>

API version: 1.7.2.RELEASE
Contact: NCIAppSupport@nih.gov
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evs

import (
	"encoding/json"
)

// checks if the ConceptResultList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConceptResultList{}

// ConceptResultList Represents a list of concepts returned from a search or find call
type ConceptResultList struct {
	// URI for this element in an rdf-based source file
	Uri *string `json:"uri,omitempty"`
	// Used to indicate the total amount of data in cases where a limit is being applied
	Ct *int32 `json:"ct,omitempty"`
	// Total nubmer of results (if paging is not considered)
	Total *int64 `json:"total,omitempty"`
	// Total time taken to compute the result
	TimeTaken *int64 `json:"timeTaken,omitempty"`
	Parameters *SearchCriteria `json:"parameters,omitempty"`
	// List of concepts
	Concepts []Concept `json:"concepts,omitempty"`
}

// NewConceptResultList instantiates a new ConceptResultList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConceptResultList() *ConceptResultList {
	this := ConceptResultList{}
	return &this
}

// NewConceptResultListWithDefaults instantiates a new ConceptResultList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConceptResultListWithDefaults() *ConceptResultList {
	this := ConceptResultList{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ConceptResultList) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptResultList) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ConceptResultList) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ConceptResultList) SetUri(v string) {
	o.Uri = &v
}

// GetCt returns the Ct field value if set, zero value otherwise.
func (o *ConceptResultList) GetCt() int32 {
	if o == nil || IsNil(o.Ct) {
		var ret int32
		return ret
	}
	return *o.Ct
}

// GetCtOk returns a tuple with the Ct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptResultList) GetCtOk() (*int32, bool) {
	if o == nil || IsNil(o.Ct) {
		return nil, false
	}
	return o.Ct, true
}

// HasCt returns a boolean if a field has been set.
func (o *ConceptResultList) HasCt() bool {
	if o != nil && !IsNil(o.Ct) {
		return true
	}

	return false
}

// SetCt gets a reference to the given int32 and assigns it to the Ct field.
func (o *ConceptResultList) SetCt(v int32) {
	o.Ct = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ConceptResultList) GetTotal() int64 {
	if o == nil || IsNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptResultList) GetTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ConceptResultList) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *ConceptResultList) SetTotal(v int64) {
	o.Total = &v
}

// GetTimeTaken returns the TimeTaken field value if set, zero value otherwise.
func (o *ConceptResultList) GetTimeTaken() int64 {
	if o == nil || IsNil(o.TimeTaken) {
		var ret int64
		return ret
	}
	return *o.TimeTaken
}

// GetTimeTakenOk returns a tuple with the TimeTaken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptResultList) GetTimeTakenOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeTaken) {
		return nil, false
	}
	return o.TimeTaken, true
}

// HasTimeTaken returns a boolean if a field has been set.
func (o *ConceptResultList) HasTimeTaken() bool {
	if o != nil && !IsNil(o.TimeTaken) {
		return true
	}

	return false
}

// SetTimeTaken gets a reference to the given int64 and assigns it to the TimeTaken field.
func (o *ConceptResultList) SetTimeTaken(v int64) {
	o.TimeTaken = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ConceptResultList) GetParameters() SearchCriteria {
	if o == nil || IsNil(o.Parameters) {
		var ret SearchCriteria
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptResultList) GetParametersOk() (*SearchCriteria, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ConceptResultList) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given SearchCriteria and assigns it to the Parameters field.
func (o *ConceptResultList) SetParameters(v SearchCriteria) {
	o.Parameters = &v
}

// GetConcepts returns the Concepts field value if set, zero value otherwise.
func (o *ConceptResultList) GetConcepts() []Concept {
	if o == nil || IsNil(o.Concepts) {
		var ret []Concept
		return ret
	}
	return o.Concepts
}

// GetConceptsOk returns a tuple with the Concepts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptResultList) GetConceptsOk() ([]Concept, bool) {
	if o == nil || IsNil(o.Concepts) {
		return nil, false
	}
	return o.Concepts, true
}

// HasConcepts returns a boolean if a field has been set.
func (o *ConceptResultList) HasConcepts() bool {
	if o != nil && !IsNil(o.Concepts) {
		return true
	}

	return false
}

// SetConcepts gets a reference to the given []Concept and assigns it to the Concepts field.
func (o *ConceptResultList) SetConcepts(v []Concept) {
	o.Concepts = v
}

func (o ConceptResultList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConceptResultList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Ct) {
		toSerialize["ct"] = o.Ct
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.TimeTaken) {
		toSerialize["timeTaken"] = o.TimeTaken
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Concepts) {
		toSerialize["concepts"] = o.Concepts
	}
	return toSerialize, nil
}

type NullableConceptResultList struct {
	value *ConceptResultList
	isSet bool
}

func (v NullableConceptResultList) Get() *ConceptResultList {
	return v.value
}

func (v *NullableConceptResultList) Set(val *ConceptResultList) {
	v.value = val
	v.isSet = true
}

func (v NullableConceptResultList) IsSet() bool {
	return v.isSet
}

func (v *NullableConceptResultList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConceptResultList(val *ConceptResultList) *NullableConceptResultList {
	return &NullableConceptResultList{value: val, isSet: true}
}

func (v NullableConceptResultList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConceptResultList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


