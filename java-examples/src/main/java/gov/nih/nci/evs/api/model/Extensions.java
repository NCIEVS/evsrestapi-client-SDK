/*
 * NCI EVS Rest API
 * Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>
 *
 * The version of the OpenAPI document: 1.7.2.RELEASE
 * Contact: NCIAppSupport@nih.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package gov.nih.nci.evs.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import gov.nih.nci.evs.api.model.Paths;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import gov.nih.nci.evs.api.invoker.JSON;

/**
 * Extensions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-15T16:28:28.893302-08:00[America/Los_Angeles]")
public class Extensions {
  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_CT = "ct";
  @SerializedName(SERIALIZED_NAME_CT)
  private Integer ct;

  public static final String SERIALIZED_NAME_IS_DISEASE = "isDisease";
  @SerializedName(SERIALIZED_NAME_IS_DISEASE)
  private Boolean isDisease;

  public static final String SERIALIZED_NAME_IS_DISEASE_GRADE = "isDiseaseGrade";
  @SerializedName(SERIALIZED_NAME_IS_DISEASE_GRADE)
  private Boolean isDiseaseGrade;

  public static final String SERIALIZED_NAME_IS_DISEASE_STAGE = "isDiseaseStage";
  @SerializedName(SERIALIZED_NAME_IS_DISEASE_STAGE)
  private Boolean isDiseaseStage;

  public static final String SERIALIZED_NAME_IS_MAIN_TYPE = "isMainType";
  @SerializedName(SERIALIZED_NAME_IS_MAIN_TYPE)
  private Boolean isMainType;

  public static final String SERIALIZED_NAME_IS_SUBTYPE = "isSubtype";
  @SerializedName(SERIALIZED_NAME_IS_SUBTYPE)
  private Boolean isSubtype;

  public static final String SERIALIZED_NAME_IS_BIOMARKER = "isBiomarker";
  @SerializedName(SERIALIZED_NAME_IS_BIOMARKER)
  private Boolean isBiomarker;

  public static final String SERIALIZED_NAME_IS_REFERENCE_GENE = "isReferenceGene";
  @SerializedName(SERIALIZED_NAME_IS_REFERENCE_GENE)
  private Boolean isReferenceGene;

  public static final String SERIALIZED_NAME_MAIN_MENU_ANCESTORS = "mainMenuAncestors";
  @SerializedName(SERIALIZED_NAME_MAIN_MENU_ANCESTORS)
  private List<Paths> mainMenuAncestors;

  public Extensions() {
  }

  public Extensions uri(String uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * Get uri
   * @return uri
  **/
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    this.uri = uri;
  }


  public Extensions ct(Integer ct) {
    
    this.ct = ct;
    return this;
  }

   /**
   * Get ct
   * @return ct
  **/
  @javax.annotation.Nullable
  public Integer getCt() {
    return ct;
  }


  public void setCt(Integer ct) {
    this.ct = ct;
  }


  public Extensions isDisease(Boolean isDisease) {
    
    this.isDisease = isDisease;
    return this;
  }

   /**
   * Get isDisease
   * @return isDisease
  **/
  @javax.annotation.Nullable
  public Boolean getIsDisease() {
    return isDisease;
  }


  public void setIsDisease(Boolean isDisease) {
    this.isDisease = isDisease;
  }


  public Extensions isDiseaseGrade(Boolean isDiseaseGrade) {
    
    this.isDiseaseGrade = isDiseaseGrade;
    return this;
  }

   /**
   * Get isDiseaseGrade
   * @return isDiseaseGrade
  **/
  @javax.annotation.Nullable
  public Boolean getIsDiseaseGrade() {
    return isDiseaseGrade;
  }


  public void setIsDiseaseGrade(Boolean isDiseaseGrade) {
    this.isDiseaseGrade = isDiseaseGrade;
  }


  public Extensions isDiseaseStage(Boolean isDiseaseStage) {
    
    this.isDiseaseStage = isDiseaseStage;
    return this;
  }

   /**
   * Get isDiseaseStage
   * @return isDiseaseStage
  **/
  @javax.annotation.Nullable
  public Boolean getIsDiseaseStage() {
    return isDiseaseStage;
  }


  public void setIsDiseaseStage(Boolean isDiseaseStage) {
    this.isDiseaseStage = isDiseaseStage;
  }


  public Extensions isMainType(Boolean isMainType) {
    
    this.isMainType = isMainType;
    return this;
  }

   /**
   * Get isMainType
   * @return isMainType
  **/
  @javax.annotation.Nullable
  public Boolean getIsMainType() {
    return isMainType;
  }


  public void setIsMainType(Boolean isMainType) {
    this.isMainType = isMainType;
  }


  public Extensions isSubtype(Boolean isSubtype) {
    
    this.isSubtype = isSubtype;
    return this;
  }

   /**
   * Get isSubtype
   * @return isSubtype
  **/
  @javax.annotation.Nullable
  public Boolean getIsSubtype() {
    return isSubtype;
  }


  public void setIsSubtype(Boolean isSubtype) {
    this.isSubtype = isSubtype;
  }


  public Extensions isBiomarker(Boolean isBiomarker) {
    
    this.isBiomarker = isBiomarker;
    return this;
  }

   /**
   * Get isBiomarker
   * @return isBiomarker
  **/
  @javax.annotation.Nullable
  public Boolean getIsBiomarker() {
    return isBiomarker;
  }


  public void setIsBiomarker(Boolean isBiomarker) {
    this.isBiomarker = isBiomarker;
  }


  public Extensions isReferenceGene(Boolean isReferenceGene) {
    
    this.isReferenceGene = isReferenceGene;
    return this;
  }

   /**
   * Get isReferenceGene
   * @return isReferenceGene
  **/
  @javax.annotation.Nullable
  public Boolean getIsReferenceGene() {
    return isReferenceGene;
  }


  public void setIsReferenceGene(Boolean isReferenceGene) {
    this.isReferenceGene = isReferenceGene;
  }


  public Extensions mainMenuAncestors(List<Paths> mainMenuAncestors) {
    
    this.mainMenuAncestors = mainMenuAncestors;
    return this;
  }

  public Extensions addMainMenuAncestorsItem(Paths mainMenuAncestorsItem) {
    if (this.mainMenuAncestors == null) {
      this.mainMenuAncestors = new ArrayList<>();
    }
    this.mainMenuAncestors.add(mainMenuAncestorsItem);
    return this;
  }

   /**
   * Get mainMenuAncestors
   * @return mainMenuAncestors
  **/
  @javax.annotation.Nullable
  public List<Paths> getMainMenuAncestors() {
    return mainMenuAncestors;
  }


  public void setMainMenuAncestors(List<Paths> mainMenuAncestors) {
    this.mainMenuAncestors = mainMenuAncestors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Extensions extensions = (Extensions) o;
    return Objects.equals(this.uri, extensions.uri) &&
        Objects.equals(this.ct, extensions.ct) &&
        Objects.equals(this.isDisease, extensions.isDisease) &&
        Objects.equals(this.isDiseaseGrade, extensions.isDiseaseGrade) &&
        Objects.equals(this.isDiseaseStage, extensions.isDiseaseStage) &&
        Objects.equals(this.isMainType, extensions.isMainType) &&
        Objects.equals(this.isSubtype, extensions.isSubtype) &&
        Objects.equals(this.isBiomarker, extensions.isBiomarker) &&
        Objects.equals(this.isReferenceGene, extensions.isReferenceGene) &&
        Objects.equals(this.mainMenuAncestors, extensions.mainMenuAncestors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, ct, isDisease, isDiseaseGrade, isDiseaseStage, isMainType, isSubtype, isBiomarker, isReferenceGene, mainMenuAncestors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Extensions {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    ct: ").append(toIndentedString(ct)).append("\n");
    sb.append("    isDisease: ").append(toIndentedString(isDisease)).append("\n");
    sb.append("    isDiseaseGrade: ").append(toIndentedString(isDiseaseGrade)).append("\n");
    sb.append("    isDiseaseStage: ").append(toIndentedString(isDiseaseStage)).append("\n");
    sb.append("    isMainType: ").append(toIndentedString(isMainType)).append("\n");
    sb.append("    isSubtype: ").append(toIndentedString(isSubtype)).append("\n");
    sb.append("    isBiomarker: ").append(toIndentedString(isBiomarker)).append("\n");
    sb.append("    isReferenceGene: ").append(toIndentedString(isReferenceGene)).append("\n");
    sb.append("    mainMenuAncestors: ").append(toIndentedString(mainMenuAncestors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uri");
    openapiFields.add("ct");
    openapiFields.add("isDisease");
    openapiFields.add("isDiseaseGrade");
    openapiFields.add("isDiseaseStage");
    openapiFields.add("isMainType");
    openapiFields.add("isSubtype");
    openapiFields.add("isBiomarker");
    openapiFields.add("isReferenceGene");
    openapiFields.add("mainMenuAncestors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Extensions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Extensions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Extensions is not found in the empty JSON string", Extensions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Extensions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Extensions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if (jsonObj.get("mainMenuAncestors") != null && !jsonObj.get("mainMenuAncestors").isJsonNull()) {
        JsonArray jsonArraymainMenuAncestors = jsonObj.getAsJsonArray("mainMenuAncestors");
        if (jsonArraymainMenuAncestors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mainMenuAncestors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mainMenuAncestors` to be an array in the JSON string but got `%s`", jsonObj.get("mainMenuAncestors").toString()));
          }

          // validate the optional field `mainMenuAncestors` (array)
          for (int i = 0; i < jsonArraymainMenuAncestors.size(); i++) {
            Paths.validateJsonObject(jsonArraymainMenuAncestors.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Extensions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Extensions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Extensions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Extensions.class));

       return (TypeAdapter<T>) new TypeAdapter<Extensions>() {
           @Override
           public void write(JsonWriter out, Extensions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Extensions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Extensions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Extensions
  * @throws IOException if the JSON string is invalid with respect to Extensions
  */
  public static Extensions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Extensions.class);
  }

 /**
  * Convert an instance of Extensions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

