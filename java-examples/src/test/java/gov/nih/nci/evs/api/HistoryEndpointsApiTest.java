/*
 * NCI EVS Rest API
 * Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>
 *
 * The version of the OpenAPI document: 1.7.2.RELEASE
 * Contact: NCIAppSupport@nih.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package gov.nih.nci.evs.api;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import gov.nih.nci.evs.api.invoker.ApiException;
import gov.nih.nci.evs.api.model.History;
import java.util.List;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * API tests for HistoryEndpointsApi. These tests will demonstrate how to call the API and log the
 * information that is returned. The asserts are used to ensure that the data we are pulling align
 * with what is expected based on how we are modeling the information.
 *
 * <p>NOTE: the asserts may be subject to change as the data evolves over time. Updating the tests
 * to align with the data we expect may be needed.
 */
public class HistoryEndpointsApiTest {

  /* History client api */
  private static HistoryEndpointsApi api = null;

  /* Test terminology */
  private static final String terminology = "ncit";

  /* Logger */
  private static final Logger log = LoggerFactory.getLogger(HistoryEndpointsApiTest.class);

  /** Instantiate the HistoryEndpointApi */
  @BeforeAll
  public static void beforeAll() {
    api = new HistoryEndpointsApi();
  }

  /**
   * Gets suggested replacements for a specified terminology and inactive code. Active codes will
   * return entries as well with an action of \&quot;active\&quot;.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getReplacementsTest() throws ApiException {
    // ARRANGE - using global variable unless otherwise listed
    String code = "C12658";
    // ACT
    List<History> response = api.getReplacements(terminology, code);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("retire", response.get(0).getAction());
    assertEquals("C19157", response.get(0).getReplacementCode());

    // LOG
    log.info("Get suggested replacements for code - C4654");
    log.info("   replacements = " + response);
  }

  /**
   * Gets suggested replacements for a specified terminology and a comma-separated list of inactive
   * codes. Active codes will return entries as well with an action of \&quot;active\&quot;.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getReplacementsFromListTest() throws ApiException {
    // ARRANGE - using global variable plus listed
    String _list = "C12658,C13320";

    // ACT
    List<History> response = api.getReplacementsFromList(terminology, _list);

    // ASSERT
    assertFalse(response.isEmpty());
    assertTrue(response.stream().filter(h -> 
      h.getCode().equals("C12658") &&
      h.getReplacementCode().equals("C19157")).count() > 0);
    assertTrue(response.stream().filter(h -> 
      h.getCode().equals("C13320") &&
      h.getAction().equals("merge") &&
      h.getReplacementCode().equals("C12756")).count() > 0);

    // LOG
    log.info("Get list of suggested replacements for retired codes - C12658,C13320");
    log.info("   suggested replacements = " + response);
  }
}
