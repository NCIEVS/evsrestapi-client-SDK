/*
 * NCI EVS Rest API
 * Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>
 *
 * The version of the OpenAPI document: 1.7.2.RELEASE
 * Contact: NCIAppSupport@nih.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package gov.nih.nci.evs.api;

import gov.nih.nci.evs.api.invoker.ApiException;
import gov.nih.nci.evs.api.model.Association;
import gov.nih.nci.evs.api.model.AssociationEntryResultList;
import gov.nih.nci.evs.api.model.Concept;
import gov.nih.nci.evs.api.model.DisjointWith;
import gov.nih.nci.evs.api.model.HierarchyNode;
import gov.nih.nci.evs.api.model.RestException;
import gov.nih.nci.evs.api.model.Role;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConceptEndpointsApi
 */
@Disabled
public class ConceptEndpointsApiTest {

    private final ConceptEndpointsApi api = new ConceptEndpointsApi();

    /**
     * Get the association entries for the specified terminology and code. Associations used to define subset membership are not resolved by this call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociationEntriesTest() throws ApiException {
        String terminology = null;
        String codeOrLabel = null;
        Integer fromRecord = null;
        Integer pageSize = null;
        AssociationEntryResultList response = api.getAssociationEntries(terminology, codeOrLabel, fromRecord, pageSize);
        // TODO: test validations
    }

    /**
     * Get the associations for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociations1Test() throws ApiException {
        String terminology = null;
        String code = null;
        List<Association> response = api.getAssociations1(terminology, code);
        // TODO: test validations
    }

    /**
     * Get child concepts for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChildrenTest() throws ApiException {
        String terminology = null;
        String code = null;
        List<Concept> response = api.getChildren(terminology, code);
        // TODO: test validations
    }

    /**
     * Get the concept for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConceptTest() throws ApiException {
        String terminology = null;
        String code = null;
        Integer limit = null;
        String include = null;
        Concept response = api.getConcept(terminology, code, limit, include);
        // TODO: test validations
    }

    /**
     * Get concepts specified by list parameter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConceptsTest() throws ApiException {
        String terminology = null;
        String _list = null;
        String include = null;
        List<Concept> response = api.getConcepts(terminology, _list, include);
        // TODO: test validations
    }

    /**
     * Get descendant concepts for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDescendantsTest() throws ApiException {
        String terminology = null;
        String code = null;
        Integer fromRecord = null;
        Integer pageSize = null;
        Integer maxLevel = null;
        List<Concept> response = api.getDescendants(terminology, code, fromRecord, pageSize, maxLevel);
        // TODO: test validations
    }

    /**
     * Get \&quot;disjoint with\&quot; info for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDisjointWithTest() throws ApiException {
        String terminology = null;
        String code = null;
        List<DisjointWith> response = api.getDisjointWith(terminology, code);
        // TODO: test validations
    }

    /**
     * Get history for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHistoryTest() throws ApiException {
        String terminology = null;
        String code = null;
        Concept response = api.getHistory(terminology, code);
        // TODO: test validations
    }

    /**
     * Get inverse associations for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInverseAssociationsTest() throws ApiException {
        String terminology = null;
        String code = null;
        List<Association> response = api.getInverseAssociations(terminology, code);
        // TODO: test validations
    }

    /**
     * Get inverse roles for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInverseRolesTest() throws ApiException {
        String terminology = null;
        String code = null;
        List<Role> response = api.getInverseRoles(terminology, code);
        // TODO: test validations
    }

    /**
     * Get maps for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMapsTest() throws ApiException {
        String terminology = null;
        String code = null;
        List<Map> response = api.getMaps(terminology, code);
        // TODO: test validations
    }

    /**
     * Get parent concepts for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParentsTest() throws ApiException {
        String terminology = null;
        String code = null;
        List<Concept> response = api.getParents(terminology, code);
        // TODO: test validations
    }

    /**
     * Get paths from the hierarchy root to the specified concept.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPathsFromRootTest() throws ApiException {
        String terminology = null;
        String code = null;
        String include = null;
        Integer fromRecord = null;
        Integer pageSize = null;
        List<List<Concept>> response = api.getPathsFromRoot(terminology, code, include, fromRecord, pageSize);
        // TODO: test validations
    }

    /**
     * Get paths from the specified code to the specified ancestor code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPathsToAncestorTest() throws ApiException {
        String terminology = null;
        String code = null;
        String ancestorCode = null;
        String include = null;
        Integer fromRecord = null;
        Integer pageSize = null;
        List<List<Concept>> response = api.getPathsToAncestor(terminology, code, ancestorCode, include, fromRecord, pageSize);
        // TODO: test validations
    }

    /**
     * Get paths to the hierarchy root from the specified code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPathsToRootTest() throws ApiException {
        String terminology = null;
        String code = null;
        String include = null;
        Integer fromRecord = null;
        Integer pageSize = null;
        List<List<Concept>> response = api.getPathsToRoot(terminology, code, include, fromRecord, pageSize);
        // TODO: test validations
    }

    /**
     * Get roles for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoles1Test() throws ApiException {
        String terminology = null;
        String code = null;
        List<Role> response = api.getRoles1(terminology, code);
        // TODO: test validations
    }

    /**
     * Get root concepts for the specified terminology
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRootsTest() throws ApiException {
        String terminology = null;
        String include = null;
        List<Concept> response = api.getRoots(terminology, include);
        // TODO: test validations
    }

    /**
     * Get subset members for the specified terminology and code.
     *
     * This endpoint will be deprecated in v2 in favor of a top level subset member endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubsetMembers1Test() throws ApiException {
        String terminology = null;
        String code = null;
        Integer fromRecord = null;
        Integer pageSize = null;
        String include = null;
        List<Concept> response = api.getSubsetMembers1(terminology, code, fromRecord, pageSize, include);
        // TODO: test validations
    }

    /**
     * Get the entire subtree from the root node to the specified code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubtreeTest() throws ApiException {
        String terminology = null;
        String code = null;
        Integer limit = null;
        List<HierarchyNode> response = api.getSubtree(terminology, code, limit);
        // TODO: test validations
    }

    /**
     * Get the entire subtree from the root node to the specified code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubtreeChildrenTest() throws ApiException {
        String terminology = null;
        String code = null;
        Integer limit = null;
        List<HierarchyNode> response = api.getSubtreeChildren(terminology, code, limit);
        // TODO: test validations
    }

}
