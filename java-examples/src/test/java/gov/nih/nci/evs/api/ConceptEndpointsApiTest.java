/*
 * NCI EVS Rest API
 * Endpoints to support searching, metadata, and content retrieval for EVS terminologies. To learn more about how to interact with this api, see the <a href=\"https://github.com/NCIEVS/evsrestapi-client-SDK\">Github evsrestapi-client-SDK project.</a>
 *
 * The version of the OpenAPI document: 1.7.2.RELEASE
 * Contact: NCIAppSupport@nih.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package gov.nih.nci.evs.api;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import gov.nih.nci.evs.api.invoker.ApiException;
import gov.nih.nci.evs.api.model.Association;
import gov.nih.nci.evs.api.model.AssociationEntryResultList;
import gov.nih.nci.evs.api.model.Concept;
import gov.nih.nci.evs.api.model.ConceptMap;
import gov.nih.nci.evs.api.model.DisjointWith;
import gov.nih.nci.evs.api.model.HierarchyNode;
import gov.nih.nci.evs.api.model.Role;
import java.util.List;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * API tests for ConceptEndpointsApi. These tests will demonstrate how to call the APIs and log the
 * information that is returned. The asserts are used to ensure that the data we are pulling align
 * with what is expected based on how we are modeling the information.
 *
 * <p>NOTE: the asserts may be subject to change as the data evolves over time. Updating the tests
 * to align with the data we expect may be needed.
 */
public class ConceptEndpointsApiTest {

  /* Concept client api */
  private static ConceptEndpointsApi api = null;

  /* Test terminology */
  private static final String terminology = "ncit";

  /* Most commonly used ncit code */
  private static final String code = "C3224";

  /* Logger */
  private static final Logger log = LoggerFactory.getLogger(ConceptEndpointsApiTest.class);

  /** Instantiate the ConceptEndpointApi */
  @BeforeAll
  public static void beforeAll() {
    api = new ConceptEndpointsApi();
  }

  /**
   * Get the association entries for the specified terminology and code. Associations used to define
   * subset membership are not resolved by this call
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getAssociationEntriesTest() throws ApiException {
    // ARRANGE - using global variables unless otherwise listed below
    String codeOrLabel = "A5";
    Integer fromRecord = 0;
    Integer pageSize = 100;

    // ACT
    AssociationEntryResultList response =
        api.getAssociationEntries(terminology, codeOrLabel, fromRecord, pageSize, null);

    // ASSERT
    assertNotNull(response);
    assertNotNull(response.getAssociationEntries());
    assertEquals("Tamoxifen Citrate", response.getAssociationEntries().get(0).getRelatedName());

    // LOG
    log.info("Get association entries for code/label - A5");
    log.info("   association entries = " + response);
  }

  /**
   * Get the associations for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getAssociations1Test() throws ApiException {
    // ARRANGE - using global variables unless otherwise listed below

    // ACT
    List<Association> response = api.getAssociations1(terminology, code, null);
    assertFalse(response.isEmpty()); // verify we got data
    Association assoc = response.get(0);

    // ASSERT
    assertEquals("CDISC SEND Terminology", assoc.getRelatedName());
    assertEquals("Concept_In_Subset", assoc.getType());

    // LOG
    log.info("Get associations for code - C3224");
    log.info("   associations = " + response);
  }

  /**
   * Get child concepts for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getChildrenTest() throws ApiException {
    // ARRANGE - using global variables unless otherwise listed below

    // ACT
    List<Concept> response = api.getChildren(terminology, code, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertNotNull(response.get(0).getName());
    assertTrue(response.get(0).getName().contains("Melanoma"));

    // LOG
    log.info("Get children for code - C3224");
    log.info("   children = " + response);
  }

  /**
   * Get the concept for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getConceptTest() throws ApiException {
    // ARRANGE - using global variables plus listed below
    String include = "minimal";

    // ACT
    Concept response = api.getConcept(terminology, code, null, include, null);

    // ASSERT
    assertNotNull(response.getName());
    assertEquals("Melanoma", response.getName());

    // LOG
    log.info("Get a single concept for code - C3224");
    log.info("   concept = " + response);
  }

  /**
   * Get the summary concept for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getConceptSummaryTest() throws ApiException {
    // ARRANGE - using global variables plus listed below
    Integer limit = null;
    String include = "summary";

    // ACT
    Concept response = api.getConcept(terminology, code, null, include, null);

    // ASSERT
    assertNotNull(response.getName());
    assertEquals("Melanoma", response.getName());

    // LOG
    log.info("Get a summary concept for code - C3224");
    log.info("   concept = " + response);
  }

  /**
   * Get the summary concept for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getConceptFullTest() throws ApiException {
    // ARRANGE - using global variables plus listed below
    Integer limit = null;
    String include = "full";

    // ACT
    Concept response = api.getConcept(terminology, code, null, include, null);

    // ASSERT
    assertNotNull(response.getName());
    assertEquals("Melanoma", response.getName());

    // LOG
    log.info("Get a full concept for code - C3224");
    log.info("   concept = " + response);
  }

  /**
   * Get the summary concept for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getConceptCustomIncludeTest() throws ApiException {
    // ARRANGE - using global variables plus listed below
    Integer limit = null;
    String include = "synonyms,children,maps,inverseAssociations";

    // ACT
    Concept response = api.getConcept(terminology, code, null, include, null);

    // ASSERT
    assertNotNull(response.getName());
    assertEquals("Melanoma", response.getName());

    // LOG
    log.info("Get a custom include concept for code - C3224");
    log.info("   concept = " + response);
  }

  /**
   * Get concepts specified by list parameter
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getConceptsTest() throws ApiException {
    // ARRANGE - using global variables unless otherwise listed below
    String _list = "C3224,C3910";
    String include = "minimal";

    // ACT
    List<Concept> response = api.getConcepts(terminology, _list, include, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("Molecular Abnormality", response.get(0).getName());
    assertEquals("Melanoma", response.get(1).getName());

    // LOG
    log.info("Get list of concepts for codes - C3224 & C3910");
    log.info("   concepts = " + response);
  }

  /**
   * Get descendant concepts for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getDescendantsTest() throws ApiException {
    // ARRANGE - using global variables plus listed below
    Integer fromRecord = 3;
    Integer pageSize = 100;
    Integer maxLevel = 4;

    // ACT
    List<Concept> response =
        api.getDescendants(terminology, code, fromRecord, pageSize, maxLevel, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals(pageSize, response.size());
    assertEquals("Adult Meningeal Melanoma", response.get(0).getName());

    // LOG
    log.info("Get list of descendents for code - C3224");
    log.info("   descendents = " + response);
  }

  /**
   * Get \&quot;disjoint with\&quot; info for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getDisjointWithTest() throws ApiException {
    // ARRANGE - using global variables unless otherwise listed below
    String code = "C3910";

    // ACT
    List<DisjointWith> response = api.getDisjointWith(terminology, code, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("C12913", response.get(0).getRelatedCode());
    assertEquals("Abnormal Cell", response.get(0).getRelatedName());

    // LOG
    log.info("Get list of disjoint with for code - C3910");
    log.info("   disjoint with = " + response);
  }

  /**
   * Get history for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getHistoryTest() throws ApiException {
    // ARRANGE - using global variables unless otherwise listed below

    // ACT
    Concept response = api.getHistory(terminology, code, null);

    // ASSERT
    assertNotNull(response);
    assertEquals("Melanoma", response.getName());
    assertNotNull(response.getHistory());

    // LOG
    log.info("Get history for code - C3224");
    log.info("   history = " + response);
  }

  /**
   * Get inverse associations for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getInverseAssociationsTest() throws ApiException {
    // ARRANGE - using global variables unless otherwise listed below

    // ACT
    List<Association> response = api.getInverseAssociations(terminology, code, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("Has_GDC_Value", response.get(0).getType());
    assertEquals("C178243", response.get(0).getRelatedCode());

    // LOG
    log.info("Get inverse associations for code - C3224");
    log.info("   inverse associates = " + response);
  }

  /**
   * Get inverse roles for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getInverseRolesTest() throws ApiException {
    // ARRANGE - using global variables unless otherwise listed below

    // ACT
    List<Role> response = api.getInverseRoles(terminology, code, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("C21390", response.get(0).getRelatedCode());
    assertEquals(
        "Beta/Gamma Crystallin Domain-Containing Protein 1", response.get(0).getRelatedName());

    // LOG
    log.info("Get inverse roles for code - C3224");
    log.info("    inverse roles = " + response);
  }

  /**
   * Get maps for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getMapsTest() throws ApiException {
    // ARRANGE - using global variables unless otherwise listed below

    // ACT
    List<ConceptMap> response = api.getMaps(terminology, code, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("morphology", response.get(0).getTargetCode());
    assertEquals("Malignant melanoma, NOS", response.get(1).getTargetName());

    // LOG
    log.info("Get maps for code - C3224");
    log.info("    maps = " + response);
  }

  /**
   * Get parent concepts for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getParentsTest() throws ApiException {
    // ARRANGE - using global variables unless otherwise listed below
    // ACT
    List<Concept> response = api.getParents(terminology, code, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("C9305", response.get(0).getCode());
    assertEquals("Malignant Neoplasm", response.get(0).getName());

    // LOG
    log.info("Get parents for code - C3224");
    log.info("    parents = " + response);
  }

  /**
   * Get paths from the hierarchy root to the specified concept.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getPathsFromRootTest() throws ApiException {
    // ARRANGE - using global variables plus listed below
    String include = null;
    Integer fromRecord = null;
    Integer pageSize = null;

    // ACT
    List<List<Concept>> response =
        api.getPathsFromRoot(terminology, code, include, fromRecord, pageSize, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertFalse(response.get(0).isEmpty());
    Concept firstMapConcept = response.get(0).get(0);
    assertEquals("C7057", firstMapConcept.getCode());
    assertEquals("Disease, Disorder or Finding", firstMapConcept.getName());

    // LOG
    log.info("Get paths from hierarchy root for code - C3224");
    log.info("    paths from root = " + response);
  }

  /**
   * Get paths from the specified code to the specified ancestor code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getPathsToAncestorTest() throws ApiException {
    // ARRANGE - using global variables plus listed below
    String ancestorCode = "C2991";
    String include = "minimal";
    Integer fromRecord = 0;

    // ACT
    List<List<Concept>> response =
        api.getPathsToAncestor(terminology, code, ancestorCode, include, fromRecord, null, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertFalse(response.get(0).isEmpty());

    // grab the first two concepts in the first list
    Concept firstAncestor = response.get(0).get(0);
    Concept secondAncestor = response.get(0).get(1);

    assertEquals("Melanoma", firstAncestor.getName());
    assertEquals("C3224", firstAncestor.getCode());
    assertEquals("Melanocytic Neoplasm", secondAncestor.getName());
    assertEquals("C7058", secondAncestor.getCode());

    // LOG
    log.info("Get paths from code to ancestor code - C3224 to C2991");
    log.info("   paths to ancestor code = " + response);
  }

  /**
   * Get paths to the hierarchy root from the specified code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getPathsToRootTest() throws ApiException {
    // ARRANGE - using global variables plus listed below
    String include = "minimal";
    Integer fromRecord = 0;
    Integer pageSize = 10;

    // ACT
    List<List<Concept>> response =
        api.getPathsToRoot(terminology, code, include, fromRecord, pageSize, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertFalse(response.get(0).isEmpty());

    // grab the first two concepts from the first list
    Concept firstPath = response.get(0).get(0);
    Concept secondPath = response.get(0).get(1);

    assertEquals("C3224", firstPath.getCode());
    assertEquals("Melanoma", firstPath.getName());
    assertEquals("C7058", secondPath.getCode());
    assertEquals("Melanocytic Neoplasm", secondPath.getName());

    // LOG
    log.info("Get paths to hierarchy root from code - C3224");
    log.info("    paths to root = " + response);
  }

  /**
   * Get roles for the specified terminology and code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getRoles1Test() throws ApiException {
    // ARRANGE - using global variables unless otherwise listed below
    // ACT
    List<Role> response = api.getRoles1(terminology, code, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("C36122", response.get(0).getRelatedCode());
    assertEquals("Benign Cellular Infiltrate", response.get(0).getRelatedName());

    // LOG
    log.info("Get roles for code - C3224");
    log.info("    roles = " + response);
  }

  /**
   * Get root concepts for the specified terminology
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getRootsTest() throws ApiException {
    // ARRANGE - using global variables plus listed below
    String include = "minimal";

    // ACT
    List<Concept> response = api.getRoots(terminology, include, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("C12913", response.get(0).getCode());
    assertEquals("Abnormal Cell", response.get(0).getName());

    // LOG
    log.info("Get root concepts for terminology - ncit");
    log.info("   root concepts = " + response);
  }

  /**
   * Get subset members for the specified terminology and code.
   *
   * <p>This endpoint will be deprecated in v2 in favor of a top level subset member endpoint.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getSubsetMembers1Test() throws ApiException {
    // ARRANGE - using global variables plus listed below
    Integer fromRecord = null;
    Integer pageSize = null;
    String include = null;

    // ACT
    List<Concept> response =
        api.getSubsetMembers1(terminology, code, fromRecord, pageSize, include, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("C178243", response.get(0).getCode());
    assertEquals(Boolean.TRUE, response.get(0).getLeaf());

    // LOG
    log.info("Get subset members for code - C3224");
    log.info("    subset members = " + response);
  }

  /**
   * Get the entire subtree from the root node to the specified code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getSubtreeTest() throws ApiException {
    // ARRANGE - using global variables plus listed below
    Integer limit = 50;

    // ACT
    List<HierarchyNode> response = api.getSubtree(terminology, code, limit, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("C12913", response.get(0).getCode());
    assertEquals("C43431", response.get(1).getCode());

    // LOG
    log.info("Get the entire subtree from the root node of code - C3224");
    log.info("   subtree = " + response);
  }

  /**
   * Get the entire subtree children from the root node to the specified code
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getSubtreeChildrenTest() throws ApiException {
    // ARRANGE - using global variables plus listed below
    Integer limit = 100;

    // ACT
    List<HierarchyNode> response = api.getSubtreeChildren(terminology, code, limit, null);

    // ASSERT
    assertFalse(response.isEmpty());
    assertEquals("C3802", response.get(0).getCode());
    assertEquals("Amelanotic Melanoma", response.get(0).getLabel());
    assertEquals(Boolean.FALSE, response.get(0).getLeaf());

    // LOG
    log.info("Get all subtree children for code - C3224");
    log.info("   subtree children = " + response);
  }
}
